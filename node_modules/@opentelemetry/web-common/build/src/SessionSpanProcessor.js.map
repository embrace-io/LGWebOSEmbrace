{"version":3,"file":"SessionSpanProcessor.js","sourceRoot":"","sources":["../../src/SessionSpanProcessor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAQH,uCAA4C;AAG5C;;GAEG;AACH,MAAa,oBAAoB;IACvB,kBAAkB,CAAkB;IAE5C,YAAY,iBAAkC;QAC5C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,KAAmB,CAAC;IAEpC;;;;OAIG;IACH,OAAO,CAAC,IAAU,EAAE,cAAuB;QACzC,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,YAAY,EAAE,CAAC;QAC1D,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,YAAY,CAAC,yBAAe,EAAE,SAAS,CAAC,CAAC;SAC/C;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,CAAe;QACnB,QAAQ;IACV,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ,KAAmB,CAAC;CACnC;AAtCD,oDAsCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport {\n  SpanProcessor,\n  Span,\n  ReadableSpan,\n} from '@opentelemetry/sdk-trace-base';\nimport { ATTR_SESSION_ID } from './semconv';\nimport { SessionProvider } from './types/SessionProvider';\n\n/**\n * SessionSpanProcessor is a {@link SpanProcessor} that adds the session.id attribute\n */\nexport class SessionSpanProcessor implements SpanProcessor {\n  private _sessionIdProvider: SessionProvider;\n\n  constructor(sessionIdProvider: SessionProvider) {\n    this._sessionIdProvider = sessionIdProvider;\n  }\n\n  /**\n   * Forces to export all finished spans\n   */\n  async forceFlush(): Promise<void> {}\n\n  /**\n   * Called when a {@link Span} is started, if the `span.isRecording()`\n   * returns true.\n   * @param span the Span that just started.\n   */\n  onStart(span: Span, _parentContext: Context): void {\n    const sessionId = this._sessionIdProvider?.getSessionId();\n    if (sessionId) {\n      span.setAttribute(ATTR_SESSION_ID, sessionId);\n    }\n  }\n\n  /**\n   * Called when a {@link ReadableSpan} is ended, if the `span.isRecording()`\n   * returns true.\n   * @param span the Span that just ended.\n   */\n  onEnd(_: ReadableSpan): void {\n    // no-op\n  }\n\n  /**\n   * Shuts down the processor. Called when SDK is shut down. This is an\n   * opportunity for processor to do any cleanup required.\n   */\n  async shutdown(): Promise<void> {}\n}\n"]}