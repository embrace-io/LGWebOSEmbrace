'use strict';

var React = require('react');
var hoistNonReactStatics = require('hoist-non-react-statics');
var instance = require('../../instance.cjs');
var attributes = require('../../../../../constants/attributes.cjs');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const withEmbraceRoutingLegacy = (WrappedComponent)=>{
    const navigationInstrumentation = instance.getNavigationInstrumentation();
    navigationInstrumentation.setInstrumentationType(attributes.EMB_NAVIGATION_INSTRUMENTATIONS.DeclarativeLegacy);
    const RouteWithEmbraceRoutingLegacy = (props)=>{
        // Make sure this is Route component
        if (props.path) {
            // Routes get injected with computedMatch when they are children of a <Switch> but the types do not reflect that
            // Manually setting the type here.
            const routeProps = props;
            // Depends on this internal behaviour
            // https://github.com/remix-run/react-router/blob/v5.3.4/packages/react-router/modules/Switch.js#L40
            // It shouldn't change as this version is legacy, and it's not being actively worked on
            if (routeProps.computedMatch) {
                navigationInstrumentation.setCurrentRoute({
                    path: routeProps.computedMatch.path,
                    url: routeProps.computedMatch.url
                });
            }
        }
        return React__namespace.createElement(WrappedComponent, props);
    };
    // Keep wrapped component metadata
    RouteWithEmbraceRoutingLegacy.displayName = `withEmbraceRoutingLegacy(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;
    hoistNonReactStatics(RouteWithEmbraceRoutingLegacy, WrappedComponent);
    return RouteWithEmbraceRoutingLegacy;
};

exports.withEmbraceRoutingLegacy = withEmbraceRoutingLegacy;
//# sourceMappingURL=withEmbraceRoutingLegacy.cjs.map
