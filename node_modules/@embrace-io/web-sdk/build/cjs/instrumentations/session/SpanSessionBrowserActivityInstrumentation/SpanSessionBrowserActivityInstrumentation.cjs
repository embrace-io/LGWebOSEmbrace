'use strict';

var constants = require('./constants.cjs');
var EmbraceInstrumentationBase = require('../../EmbraceInstrumentationBase/EmbraceInstrumentationBase.cjs');
var bulkRemoveEventListener = require('../../../utils/bulkRemoveEventListener/bulkRemoveEventListener.cjs');
var bulkAddEventListener = require('../../../utils/bulkAddEventListener/bulkAddEventListener.cjs');
var throttle = require('../../../utils/throttle.cjs');

/**
 *  SpanSessionBrowserActivityInstrumentation will track the user activity and end the session span if there is no
 *  activity for a certain amount of time.
 *  SpanSessionBrowserActivityInstrumentation will initialize new sessions if new activity is detected and there is no
 *  active session.
 * */ class SpanSessionBrowserActivityInstrumentation extends EmbraceInstrumentationBase.EmbraceInstrumentationBase {
    constructor({ diag } = {}){
        super({
            instrumentationName: 'SpanSessionBrowserActivityInstrumentation',
            instrumentationVersion: '1.0.0',
            diag,
            config: {}
        }), this.disable = ()=>{
            bulkRemoveEventListener.bulkRemoveEventListener({
                target: window,
                events: constants.WINDOW_USER_EVENTS,
                callback: this._onActivityThrottled
            });
            if (this._activityTimeout) {
                clearTimeout(this._activityTimeout);
            }
            this._activityTimeout = null;
        }, this.enable = ()=>{
            bulkAddEventListener.bulkAddEventListener({
                target: window,
                events: constants.WINDOW_USER_EVENTS,
                callback: this._onActivityThrottled
            });
        }, this._onInactivity = ()=>{
            this._diag.debug('Inactivity detected');
            if (this._activityTimeout) {
                clearTimeout(this._activityTimeout);
            }
            this._activityTimeout = null;
            this.sessionManager.endSessionSpanInternal('inactivity');
        }, this._onActivity = ()=>{
            this._diag.debug('Activity detected');
            if (this._activityTimeout) {
                clearTimeout(this._activityTimeout);
            }
            // if there was no active session, start one
            if (!this.sessionManager.getSessionId()) {
                this.sessionManager.startSessionSpan({
                    reason: 'activity'
                });
            }
            this._activityTimeout = setTimeout(this._onInactivity, constants.TIMEOUT_TIME);
        };
        this._activityTimeout = null;
        this._onActivityThrottled = throttle.throttle(this._onActivity, constants.EVENT_THROTTLING_TIME_WINDOW);
        if (this._config.enabled) {
            this.enable();
        }
    }
}

exports.SpanSessionBrowserActivityInstrumentation = SpanSessionBrowserActivityInstrumentation;
//# sourceMappingURL=SpanSessionBrowserActivityInstrumentation.cjs.map
