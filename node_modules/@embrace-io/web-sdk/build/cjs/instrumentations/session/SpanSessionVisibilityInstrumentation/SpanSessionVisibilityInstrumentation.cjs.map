{"version":3,"file":"SpanSessionVisibilityInstrumentation.cjs","sources":["../../../../../src/instrumentations/session/SpanSessionVisibilityInstrumentation/SpanSessionVisibilityInstrumentation.ts"],"sourcesContent":["import { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/index.js';\nimport type { SpanSessionVisibilityInstrumentationArgs } from './types.js';\nimport type { TimeoutRef } from '../../../utils/index.js';\nimport {\n  bulkAddEventListener,\n  bulkRemoveEventListener,\n  throttle,\n} from '../../../utils/index.js';\nimport type { EmbraceProcessor } from '../../../processors/index.js';\n\nconst SESSION_INTERACTION_EVENTS = ['mousedown'];\n\nexport class SpanSessionVisibilityInstrumentation extends EmbraceInstrumentationBase {\n  private _currentVisibilityState: DocumentVisibilityState;\n  private _checkVisibilityTimeout: TimeoutRef | null;\n  private _interactionSinceLastVisibilityChange: boolean;\n  private readonly _avoidEndingLimitedSessions: boolean;\n  private readonly _embraceSpanProcessor?: EmbraceProcessor;\n  private readonly _checkVisibilityChange: () => void;\n  private readonly _onVisibilityChange: () => void;\n  private readonly _onInteractionThrottled: () => void;\n\n  public constructor(\n    {\n      diag,\n      perf,\n      visibilityWaitTimeMs = 0,\n      limitedSessionMaxDurationMs = 0,\n      backgroundSessions = false,\n      maxPendingSpanCount = 5,\n      visibilityDoc = window.document,\n    }: SpanSessionVisibilityInstrumentationArgs = {},\n    embraceSpanProcessor?: EmbraceProcessor\n  ) {\n    super({\n      instrumentationName: 'SpanSessionVisibilityInstrumentation',\n      instrumentationVersion: '1.0.0',\n      diag,\n      perf,\n      config: {},\n    });\n\n    this._currentVisibilityState = visibilityDoc.visibilityState;\n    this._checkVisibilityTimeout = null;\n    this._interactionSinceLastVisibilityChange = false;\n    this._avoidEndingLimitedSessions = limitedSessionMaxDurationMs > 0;\n    this._embraceSpanProcessor = embraceSpanProcessor;\n\n    this._checkVisibilityChange = () => {\n      if (visibilityWaitTimeMs <= 0) {\n        // If no timeout configured, events are forwarded directly.\n        this._currentVisibilityState = visibilityDoc.visibilityState;\n        this._onVisibilityChange();\n        return;\n      }\n      if (this._checkVisibilityTimeout) {\n        clearTimeout(this._checkVisibilityTimeout);\n      }\n\n      // When switching to visible, we want to trigger the event immediately\n      if (\n        visibilityDoc.visibilityState === 'visible' &&\n        this._currentVisibilityState != visibilityDoc.visibilityState\n      ) {\n        this._currentVisibilityState = visibilityDoc.visibilityState;\n        this._onVisibilityChange();\n        return;\n      }\n\n      this._diag.debug(\n        `Visibility changed to ${visibilityDoc.visibilityState}. Will wait ${(visibilityWaitTimeMs / 1000).toString()}s, and check if visibility changed`\n      );\n      this._checkVisibilityTimeout = setTimeout(() => {\n        if (this._currentVisibilityState != visibilityDoc.visibilityState) {\n          this._currentVisibilityState = visibilityDoc.visibilityState;\n          this._onVisibilityChange();\n        } else {\n          this._diag.debug(\n            `Visibility was not changed after timeout happened: ${visibilityDoc.visibilityState}`\n          );\n        }\n      }, visibilityWaitTimeMs);\n    };\n\n    this._onVisibilityChange = () => {\n      this._diag.debug(\n        `Visibility change detected: ${visibilityDoc.visibilityState}`\n      );\n\n      const currentSessionStartTime = this.sessionManager.getSessionStartTime();\n\n      // A limited session is one that is:\n      // - shorter than a specified duration threshold\n      // - contains no user interactions\n      // - Embrace is enabled and the amount of pending spans is less than MAX_PENDING_SPAN_COUNT\n      const isLimitedSession =\n        this._avoidEndingLimitedSessions &&\n        currentSessionStartTime !== null &&\n        this.perf.millisSinceHRTime(currentSessionStartTime) <\n          limitedSessionMaxDurationMs &&\n        !this._interactionSinceLastVisibilityChange &&\n        !!this._embraceSpanProcessor &&\n        this._embraceSpanProcessor.getPendingSpansCount() < maxPendingSpanCount;\n\n      if (isLimitedSession) {\n        this._diag.debug(\n          'Not ending the session since it is considered limited'\n        );\n        // If this session still meets the definition of a limited session don't yet end it but instead just record\n        // the visibility change as a breadcrumb\n        this.sessionManager.addBreadcrumb(\n          `Tab visibility changed to ${visibilityDoc.visibilityState}`\n        );\n\n        const sessionId = this.sessionManager.getSessionId();\n        if (sessionId) {\n          const sessionSpan =\n            this.sessionManager.currentSessionAsReadableSpan('state_changed');\n          if (sessionSpan) {\n            this._embraceSpanProcessor.storePendingSpans(\n              sessionId,\n              sessionSpan\n            );\n          }\n        }\n      } else {\n        // If there was a session in progress that we didn't end because we considered it limited, then drop the stored spans in storage:\n        const sessionId = this.sessionManager.getSessionId();\n        if (this._embraceSpanProcessor && sessionId) {\n          this._embraceSpanProcessor.clearStoredSpans(sessionId);\n        }\n\n        this.sessionManager.endSessionSpanInternal('state_changed');\n\n        if (visibilityDoc.visibilityState === 'hidden' && backgroundSessions) {\n          this._diag.debug(\n            'Starting a session since document visibility switched to hidden and `backgroundSessions` is enabled'\n          );\n          this.sessionManager.startSessionSpan({ reason: 'hidden' });\n        } else if (visibilityDoc.visibilityState === 'visible') {\n          this._diag.debug(\n            'Starting a session since document visibility switched to visible'\n          );\n          this.sessionManager.startSessionSpan({ reason: 'visible' });\n        }\n      }\n\n      this._interactionSinceLastVisibilityChange = false;\n    };\n\n    this._onInteractionThrottled = throttle(() => {\n      this._interactionSinceLastVisibilityChange = true;\n    }, 1000);\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  public disable(): void {\n    window.removeEventListener('visibilitychange', this._checkVisibilityChange);\n\n    if (this._avoidEndingLimitedSessions) {\n      bulkRemoveEventListener({\n        target: window,\n        events: SESSION_INTERACTION_EVENTS,\n        callback: this._onInteractionThrottled,\n      });\n    }\n  }\n\n  public enable(): void {\n    window.addEventListener('visibilitychange', this._checkVisibilityChange);\n\n    if (this._avoidEndingLimitedSessions) {\n      bulkAddEventListener({\n        target: window,\n        events: SESSION_INTERACTION_EVENTS,\n        callback: this._onInteractionThrottled,\n      });\n    }\n  }\n}\n"],"names":["SESSION_INTERACTION_EVENTS","SpanSessionVisibilityInstrumentation","EmbraceInstrumentationBase","diag","perf","visibilityWaitTimeMs","limitedSessionMaxDurationMs","backgroundSessions","maxPendingSpanCount","visibilityDoc","window","document","embraceSpanProcessor","instrumentationName","instrumentationVersion","config","_currentVisibilityState","visibilityState","_checkVisibilityTimeout","_interactionSinceLastVisibilityChange","_avoidEndingLimitedSessions","_embraceSpanProcessor","_checkVisibilityChange","_onVisibilityChange","clearTimeout","_diag","debug","toString","setTimeout","currentSessionStartTime","sessionManager","getSessionStartTime","isLimitedSession","millisSinceHRTime","getPendingSpansCount","addBreadcrumb","sessionId","getSessionId","sessionSpan","currentSessionAsReadableSpan","storePendingSpans","clearStoredSpans","endSessionSpanInternal","startSessionSpan","reason","_onInteractionThrottled","throttle","_config","enabled","enable","disable","removeEventListener","bulkRemoveEventListener","target","events","callback","addEventListener","bulkAddEventListener"],"mappings":"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"}