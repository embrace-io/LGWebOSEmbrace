'use strict';

var InstrumentationAbstract = require('../InstrumentationAbstract/InstrumentationAbstract.cjs');
var OTelPerformanceManager = require('../../utils/PerformanceManager/OTelPerformanceManager.cjs');
var sessionAPI = require('../../api-sessions/sessionAPI.cjs');
var logAPI = require('../../api-logs/logAPI.cjs');

class EmbraceInstrumentationBase extends InstrumentationAbstract.InstrumentationAbstract {
    constructor({ instrumentationName, instrumentationVersion, config, diag, perf }){
        super(instrumentationName, instrumentationVersion, config);
        // optionally override the diag logger from the base class
        if (diag) {
            this._diag = diag;
        }
        this._perf = perf ?? new OTelPerformanceManager.OTelPerformanceManager();
        this._sessionManager = sessionAPI.session.getSpanSessionManager();
        this._logManager = logAPI.log.getLogManager();
    }
    /* Returns session provider */ get sessionManager() {
        return this._sessionManager;
    }
    /* Returns log manager */ get logManager() {
        return this._logManager;
    }
    /* Returns the performance manager */ get perf() {
        return this._perf;
    }
    // no-op
    init() {
        return undefined;
    }
    setLogManager(logManager) {
        this._logManager = logManager;
    }
    setSessionManager(sessionManager) {
        this._sessionManager = sessionManager;
    }
}

exports.EmbraceInstrumentationBase = EmbraceInstrumentationBase;
//# sourceMappingURL=EmbraceInstrumentationBase.cjs.map
