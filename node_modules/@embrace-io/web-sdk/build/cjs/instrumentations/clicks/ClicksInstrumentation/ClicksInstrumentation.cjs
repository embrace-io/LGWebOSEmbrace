'use strict';

var utils = require('./utils.cjs');
var EmbraceInstrumentationBase = require('../../EmbraceInstrumentationBase/EmbraceInstrumentationBase.cjs');

class ClicksInstrumentation extends EmbraceInstrumentationBase.EmbraceInstrumentationBase {
    constructor({ diag, perf, shouldTrack, innerTextForElement } = {}){
        super({
            instrumentationName: 'ClicksInstrumentation',
            instrumentationVersion: '1.0.0',
            diag,
            perf,
            config: {}
        });
        this._onClickHandler = (event)=>{
            const element = event.target;
            if (!(element instanceof HTMLElement)) {
                return;
            }
            if (element.hasAttribute('disabled')) {
                return;
            }
            if (shouldTrack && !shouldTrack(element)) {
                return;
            }
            try {
                const currentSessionSpan = this.sessionManager.getSessionSpan();
                if (currentSessionSpan) {
                    currentSessionSpan.addEvent('click', {
                        'emb.type': 'ux.tap',
                        'view.name': utils.getHTMLElementFriendlyName(element, innerTextForElement ? innerTextForElement(element) : element.innerText),
                        'tap.coords': `${event.x.toString()},${event.y.toString()}`
                    }, this.perf.epochMillisFromOriginOffset(event.timeStamp));
                }
            } catch (e) {
                this._diag.error('failed to create new user interaction span event', e);
            }
        };
        if (this._config.enabled) {
            this.enable();
        }
    }
    disable() {
        document.removeEventListener('click', this._onClickHandler);
    }
    enable() {
        document.addEventListener('click', this._onClickHandler);
    }
}

exports.ClicksInstrumentation = ClicksInstrumentation;
//# sourceMappingURL=ClicksInstrumentation.cjs.map
