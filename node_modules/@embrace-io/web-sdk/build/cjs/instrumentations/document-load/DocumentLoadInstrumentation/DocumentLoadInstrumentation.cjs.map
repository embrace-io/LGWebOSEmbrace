{"version":3,"file":"DocumentLoadInstrumentation.cjs","sources":["../../../../../src/instrumentations/document-load/DocumentLoadInstrumentation/DocumentLoadInstrumentation.ts"],"sourcesContent":["/*\n * Adapted from OpenTelemetry document-load instrumentation\n * https://github.com/open-telemetry/opentelemetry-js-contrib/tree/cc7eff47e2e7bad7678241b766753d5bd6dbc85f/packages/instrumentation-document-load\n *\n * We added these new attributes:\n *\n * 'decoded_body_size' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize\n * 'delivery_type' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/deliveryType\n * 'encoded_body_size' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize\n * 'entry_type' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType\n * 'initiator_type' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType\n * 'render_blocking_status' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/renderBlockingStatus\n * 'transfer_size' - https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize\n */\n\nimport type { Span } from '@opentelemetry/api';\nimport { context, propagation, ROOT_CONTEXT, trace } from '@opentelemetry/api';\nimport { TRACE_PARENT_HEADER } from '@opentelemetry/core';\nimport type { PerformanceEntries as OtelPerformanceEntries } from '@opentelemetry/sdk-trace-web';\nimport { safeExecuteInTheMiddle } from '@opentelemetry/instrumentation';\nimport {\n  addSpanNetworkEvent,\n  addSpanNetworkEvents,\n  hasKey,\n  PerformanceTimingNames,\n} from '@opentelemetry/sdk-trace-web';\nimport { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/index.js';\nimport { AttributeNames } from './enums/AttributeNames.js';\nimport type {\n  DocumentLoadCustomAttributeFunction,\n  DocumentLoadInstrumentationConfig,\n  ResourceFetchCustomAttributeFunction,\n} from './types.js';\n\nimport {\n  ATTR_URL_FULL,\n  ATTR_USER_AGENT_ORIGINAL,\n  ATTR_HTTP_RESPONSE_BODY_SIZE,\n  ATTR_HTTP_RESPONSE_SIZE,\n} from '@opentelemetry/semantic-conventions/incubating';\nimport {\n  addSpanPerformancePaintEvents,\n  getPerformanceNavigationEntries,\n} from './utils.js';\nimport { EMB_TYPES, KEY_EMB_TYPE } from '../../../constants/index.js';\nimport { ATTR_HTTP_RESPONSE_STATUS_CODE } from '@opentelemetry/semantic-conventions';\n\ntype EmbracePerformanceResourceTiming = PerformanceResourceTiming & {\n  deliveryType?: string;\n  entryType?: string;\n  initiatorType?: string;\n  renderBlockingStatus?: string;\n  transferSize?: number;\n};\n\ntype PerformanceEntries = OtelPerformanceEntries & {\n  deliveryType?: string;\n  entryType?: string;\n  initiatorType?: string;\n  renderBlockingStatus?: string;\n  responseStatus?: number;\n  transferSize?: number;\n};\n\nconst ATTR_DELIVERY_TYPE = 'delivery_type';\nconst ATTR_ENTRY_TYPE = 'entry_type';\nconst ATTR_INITIATOR_TYPE = 'initiator_type';\nconst ATTR_RENDER_BLOCKING_STATUS = 'render_blocking_status';\nconst ATTR_DECODED_BODY_SIZE = 'decoded_body_size';\n\nexport class DocumentLoadInstrumentation extends EmbraceInstrumentationBase<DocumentLoadInstrumentationConfig> {\n  private readonly _onDocumentLoaded: () => void;\n\n  public constructor({\n    diag,\n    perf,\n    enabled,\n    applyCustomAttributesOnSpan,\n    ignorePerformancePaintEvents = false,\n    ignoreNetworkEvents = false,\n  }: DocumentLoadInstrumentationConfig = {}) {\n    super({\n      instrumentationName: 'DocumentLoadInstrumentation',\n      instrumentationVersion: '1.0.0',\n      diag,\n      perf,\n      config: {\n        enabled,\n        applyCustomAttributesOnSpan,\n        ignorePerformancePaintEvents,\n        ignoreNetworkEvents,\n      },\n    });\n\n    this._onDocumentLoaded = () => {\n      // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd\n      window.setTimeout(() => {\n        this._collectPerformance();\n      }, 0);\n    };\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  protected override init(): void {\n    this._diag.debug('Initializing document load instrumentation');\n    return undefined;\n  }\n\n  /**\n   * Adds spans for all resources\n   * @param rootSpan\n   */\n  private _addResourcesSpans(rootSpan: Span): void {\n    const resources: EmbracePerformanceResourceTiming[] =\n      performance.getEntriesByType('resource');\n    resources.forEach(resource => {\n      this._initResourceSpan(resource, rootSpan);\n    });\n  }\n\n  /**\n   * Collects information about performance and creates appropriate spans\n   */\n  private _collectPerformance(): void {\n    const metaElement = Array.from(document.getElementsByTagName('meta')).find(\n      e => e.getAttribute('name') === TRACE_PARENT_HEADER\n    );\n    const entries = getPerformanceNavigationEntries();\n    const traceparent = (metaElement && metaElement.content) || '';\n    context.with(propagation.extract(ROOT_CONTEXT, { traceparent }), () => {\n      const rootSpan = this._startSpan(\n        AttributeNames.DOCUMENT_LOAD,\n        PerformanceTimingNames.FETCH_START,\n        entries\n      );\n      if (!rootSpan) {\n        return;\n      }\n      context.with(trace.setSpan(context.active(), rootSpan), () => {\n        const fetchSpan = this._startSpan(\n          AttributeNames.DOCUMENT_FETCH,\n          PerformanceTimingNames.FETCH_START,\n          entries\n        );\n        if (fetchSpan) {\n          fetchSpan.setAttribute(ATTR_URL_FULL, location.href);\n          context.with(trace.setSpan(context.active(), fetchSpan), () => {\n            addSpanNetworkEvents(\n              fetchSpan,\n              entries,\n              this.getConfig().ignoreNetworkEvents\n            );\n            this._addCustomAttributesOnSpan(\n              fetchSpan,\n              this.getConfig().applyCustomAttributesOnSpan?.documentFetch\n            );\n            this._endSpan(\n              fetchSpan,\n              PerformanceTimingNames.RESPONSE_END,\n              entries\n            );\n          });\n        }\n      });\n\n      rootSpan.setAttribute(KEY_EMB_TYPE, EMB_TYPES.DocumentLoad);\n      rootSpan.setAttribute(ATTR_URL_FULL, location.href);\n      rootSpan.setAttribute(ATTR_USER_AGENT_ORIGINAL, navigator.userAgent);\n\n      this._addResourcesSpans(rootSpan);\n\n      if (!this.getConfig().ignoreNetworkEvents) {\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.FETCH_START,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.UNLOAD_EVENT_START,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.UNLOAD_EVENT_END,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.DOM_INTERACTIVE,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.DOM_CONTENT_LOADED_EVENT_START,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.DOM_CONTENT_LOADED_EVENT_END,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.DOM_COMPLETE,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.LOAD_EVENT_START,\n          entries\n        );\n        addSpanNetworkEvent(\n          rootSpan,\n          PerformanceTimingNames.LOAD_EVENT_END,\n          entries\n        );\n      }\n\n      if (!this.getConfig().ignorePerformancePaintEvents) {\n        addSpanPerformancePaintEvents(rootSpan);\n      }\n\n      this._addCustomAttributesOnSpan(\n        rootSpan,\n        this.getConfig().applyCustomAttributesOnSpan?.documentLoad\n      );\n      this._endSpan(rootSpan, PerformanceTimingNames.LOAD_EVENT_END, entries);\n    });\n  }\n\n  /**\n   * Helper function for ending span\n   * @param span\n   * @param performanceName name of performance entry for time end\n   * @param entries\n   */\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  private _endSpan(\n    span: Span | undefined,\n    performanceName: string,\n    entries: PerformanceEntries\n  ) {\n    // span can be undefined when entries are missing the certain performance - the span will not be created\n    if (span) {\n      if (\n        hasKey(entries, performanceName) &&\n        typeof entries[performanceName] === 'number'\n      ) {\n        span.end(entries[performanceName]);\n      } else {\n        span.end();\n      }\n    }\n  }\n\n  /**\n   * Creates and ends a span with network information about resource added as timed events\n   * @param resource\n   * @param parentSpan\n   */\n  private _initResourceSpan(\n    resource: EmbracePerformanceResourceTiming,\n    parentSpan: Span\n  ) {\n    const span = this._startSpan(\n      AttributeNames.RESOURCE_FETCH,\n      PerformanceTimingNames.FETCH_START,\n      resource,\n      parentSpan\n    );\n    if (span) {\n      span.setAttribute(KEY_EMB_TYPE, EMB_TYPES.ResourceFetch);\n      span.setAttribute(ATTR_URL_FULL, resource.name);\n      addSpanNetworkEvents(\n        span,\n        resource,\n        this.getConfig().ignoreNetworkEvents\n      );\n      if (resource.deliveryType) {\n        span.setAttribute(ATTR_DELIVERY_TYPE, resource.deliveryType);\n      }\n      span.setAttribute(ATTR_ENTRY_TYPE, resource.entryType);\n      span.setAttribute(ATTR_INITIATOR_TYPE, resource.initiatorType);\n      if (resource.renderBlockingStatus) {\n        span.setAttribute(\n          ATTR_RENDER_BLOCKING_STATUS,\n          resource.renderBlockingStatus\n        );\n      }\n      span.setAttribute(\n        ATTR_HTTP_RESPONSE_STATUS_CODE,\n        resource.responseStatus\n      );\n      span.setAttribute(ATTR_HTTP_RESPONSE_BODY_SIZE, resource.encodedBodySize);\n      span.setAttribute(ATTR_HTTP_RESPONSE_SIZE, resource.transferSize);\n      span.setAttribute(ATTR_DECODED_BODY_SIZE, resource.decodedBodySize);\n\n      this._addCustomAttributesOnResourceSpan(\n        span,\n        resource,\n        this.getConfig().applyCustomAttributesOnSpan?.resourceFetch\n      );\n      this._endSpan(span, PerformanceTimingNames.RESPONSE_END, resource);\n    }\n  }\n\n  /**\n   * Helper function for starting a span\n   * @param spanName name of span\n   * @param performanceName name of performance entry for time start\n   * @param entries\n   * @param parentSpan\n   */\n  private _startSpan(\n    spanName: string,\n    performanceName: string,\n    entries: PerformanceEntries,\n    parentSpan?: Span\n  ): Span | undefined {\n    if (\n      hasKey(entries, performanceName) &&\n      typeof entries[performanceName] === 'number'\n    ) {\n      const span = this.tracer.startSpan(\n        spanName,\n        {\n          startTime: entries[performanceName],\n        },\n        parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined\n      );\n      return span;\n    }\n    return undefined;\n  }\n\n  /**\n   * executes callback {_onDocumentLoaded} when the page is loaded\n   */\n  private _waitForPageLoad() {\n    if (window.document.readyState === 'complete') {\n      this._onDocumentLoaded();\n    } else {\n      window.addEventListener('load', this._onDocumentLoaded);\n    }\n  }\n\n  /**\n   * adds custom attributes to root span if configured\n   */\n  private _addCustomAttributesOnSpan(\n    span: Span,\n    applyCustomAttributesOnSpan: DocumentLoadCustomAttributeFunction | undefined\n  ) {\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => {\n          applyCustomAttributesOnSpan(span);\n        },\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('addCustomAttributesOnSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * adds custom attributes to span if configured\n   */\n  private _addCustomAttributesOnResourceSpan(\n    span: Span,\n    resource: EmbracePerformanceResourceTiming,\n    applyCustomAttributesOnSpan:\n      | ResourceFetchCustomAttributeFunction\n      | undefined\n  ) {\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => {\n          applyCustomAttributesOnSpan(span, resource);\n        },\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('addCustomAttributesOnResourceSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  public enable(): void {\n    window.removeEventListener('load', this._onDocumentLoaded);\n    this._waitForPageLoad();\n  }\n\n  public disable(): void {\n    window.removeEventListener('load', this._onDocumentLoaded);\n  }\n}\n"],"names":["ATTR_DELIVERY_TYPE","ATTR_ENTRY_TYPE","ATTR_INITIATOR_TYPE","ATTR_RENDER_BLOCKING_STATUS","ATTR_DECODED_BODY_SIZE","DocumentLoadInstrumentation","EmbraceInstrumentationBase","diag","perf","enabled","applyCustomAttributesOnSpan","ignorePerformancePaintEvents","ignoreNetworkEvents","instrumentationName","instrumentationVersion","config","_onDocumentLoaded","window","setTimeout","_collectPerformance","_config","enable","init","_diag","debug","undefined","_addResourcesSpans","rootSpan","resources","performance","getEntriesByType","forEach","resource","_initResourceSpan","metaElement","Array","from","document","getElementsByTagName","find","e","getAttribute","TRACE_PARENT_HEADER","entries","getPerformanceNavigationEntries","traceparent","content","context","with","propagation","extract","ROOT_CONTEXT","_startSpan","AttributeNames","DOCUMENT_LOAD","PerformanceTimingNames","FETCH_START","trace","setSpan","active","fetchSpan","DOCUMENT_FETCH","setAttribute","ATTR_URL_FULL","location","href","addSpanNetworkEvents","getConfig","_addCustomAttributesOnSpan","documentFetch","_endSpan","RESPONSE_END","KEY_EMB_TYPE","EMB_TYPES","DocumentLoad","ATTR_USER_AGENT_ORIGINAL","navigator","userAgent","addSpanNetworkEvent","UNLOAD_EVENT_START","UNLOAD_EVENT_END","DOM_INTERACTIVE","DOM_CONTENT_LOADED_EVENT_START","DOM_CONTENT_LOADED_EVENT_END","DOM_COMPLETE","LOAD_EVENT_START","LOAD_EVENT_END","addSpanPerformancePaintEvents","documentLoad","span","performanceName","hasKey","end","parentSpan","RESOURCE_FETCH","ResourceFetch","name","deliveryType","entryType","initiatorType","renderBlockingStatus","ATTR_HTTP_RESPONSE_STATUS_CODE","responseStatus","ATTR_HTTP_RESPONSE_BODY_SIZE","encodedBodySize","ATTR_HTTP_RESPONSE_SIZE","transferSize","decodedBodySize","_addCustomAttributesOnResourceSpan","resourceFetch","spanName","tracer","startSpan","startTime","_waitForPageLoad","readyState","addEventListener","safeExecuteInTheMiddle","error","removeEventListener","disable"],"mappings":"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"}