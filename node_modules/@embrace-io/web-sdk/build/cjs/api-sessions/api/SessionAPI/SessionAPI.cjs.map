{"version":3,"file":"SessionAPI.cjs","sources":["../../../../../src/api-sessions/api/SessionAPI/SessionAPI.ts"],"sourcesContent":["import type { HrTime } from '@opentelemetry/api';\nimport type {\n  PropertyOptions,\n  ReasonSessionEnded,\n  SpanSessionManager,\n  StartSessionOptions,\n} from '../../manager/index.js';\nimport { ProxySpanSessionManager } from '../../manager/index.js';\nimport type { SessionAPIArgs } from './types.js';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-web';\n\nexport class SessionAPI implements SpanSessionManager {\n  private static _instance?: SessionAPI;\n  private readonly _proxySpanSessionManager;\n\n  private constructor({ proxySpanSessionManager }: SessionAPIArgs) {\n    this._proxySpanSessionManager = proxySpanSessionManager;\n  }\n\n  public static getInstance(): SessionAPI {\n    if (!SessionAPI._instance) {\n      SessionAPI._instance = new SessionAPI({\n        proxySpanSessionManager: new ProxySpanSessionManager(),\n      });\n    }\n\n    return SessionAPI._instance;\n  }\n\n  public getSpanSessionManager: () => SpanSessionManager = () => {\n    return this._proxySpanSessionManager;\n  };\n\n  public setGlobalSessionManager(sessionManager: SpanSessionManager): void {\n    this._proxySpanSessionManager.setDelegate(sessionManager);\n  }\n\n  public addBreadcrumb(name: string): void {\n    this.getSpanSessionManager().addBreadcrumb(name);\n  }\n\n  public addProperty(\n    key: string,\n    value: string,\n    options?: PropertyOptions\n  ): void {\n    this.getSpanSessionManager().addProperty(key, value, options);\n  }\n\n  public removeProperty(key: string): void {\n    this.getSpanSessionManager().removeProperty(key);\n  }\n\n  public endSessionSpan() {\n    this.getSpanSessionManager().endSessionSpan();\n  }\n\n  public endSessionSpanInternal(reason: ReasonSessionEnded) {\n    this.getSpanSessionManager().endSessionSpanInternal(reason);\n  }\n\n  public currentSessionAsReadableSpan(\n    reason: ReasonSessionEnded\n  ): ReadableSpan | null {\n    return this.getSpanSessionManager().currentSessionAsReadableSpan(reason);\n  }\n\n  public getSessionId(): string | null {\n    return this.getSpanSessionManager().getSessionId();\n  }\n\n  public getSessionSpan() {\n    return this.getSpanSessionManager().getSessionSpan();\n  }\n\n  public getSessionStartTime(): HrTime | null {\n    return this.getSpanSessionManager().getSessionStartTime();\n  }\n\n  public startSessionSpan(options?: StartSessionOptions) {\n    this.getSpanSessionManager().startSessionSpan(options);\n  }\n\n  public addSessionStartedListener(listener: () => void): () => void {\n    return this.getSpanSessionManager().addSessionStartedListener(listener);\n  }\n\n  public addSessionEndedListener(listener: () => void): () => void {\n    return this.getSpanSessionManager().addSessionEndedListener(listener);\n  }\n}\n"],"names":["SessionAPI","proxySpanSessionManager","getSpanSessionManager","_proxySpanSessionManager","getInstance","_instance","ProxySpanSessionManager","setGlobalSessionManager","sessionManager","setDelegate","addBreadcrumb","name","addProperty","key","value","options","removeProperty","endSessionSpan","endSessionSpanInternal","reason","currentSessionAsReadableSpan","getSessionId","getSessionSpan","getSessionStartTime","startSessionSpan","addSessionStartedListener","listener","addSessionEndedListener"],"mappings":";;;;AAWO,MAAMA,UAAAA,CAAAA;IAIX,WAAA,CAAoB,EAAEC,uBAAuB,EAAkB,CAAE;aAc1DC,qBAAAA,GAAkD,IAAA;YACvD,OAAO,IAAI,CAACC,wBAAwB;AACtC,QAAA,CAAA;QAfE,IAAI,CAACA,wBAAwB,GAAGF,uBAAAA;AAClC,IAAA;AAEA,IAAA,OAAcG,WAAAA,GAA0B;QACtC,IAAI,CAACJ,UAAAA,CAAWK,SAAS,EAAE;YACzBL,UAAAA,CAAWK,SAAS,GAAG,IAAIL,UAAAA,CAAW;AACpCC,gBAAAA,uBAAAA,EAAyB,IAAIK,+CAAAA;AAC/B,aAAA,CAAA;AACF,QAAA;AAEA,QAAA,OAAON,WAAWK,SAAS;AAC7B,IAAA;AAMOE,IAAAA,uBAAAA,CAAwBC,cAAkC,EAAQ;AACvE,QAAA,IAAI,CAACL,wBAAwB,CAACM,WAAW,CAACD,cAAAA,CAAAA;AAC5C,IAAA;AAEOE,IAAAA,aAAAA,CAAcC,IAAY,EAAQ;AACvC,QAAA,IAAI,CAACT,qBAAqB,EAAA,CAAGQ,aAAa,CAACC,IAAAA,CAAAA;AAC7C,IAAA;AAEOC,IAAAA,WAAAA,CACLC,GAAW,EACXC,KAAa,EACbC,OAAyB,EACnB;AACN,QAAA,IAAI,CAACb,qBAAqB,EAAA,CAAGU,WAAW,CAACC,KAAKC,KAAAA,EAAOC,OAAAA,CAAAA;AACvD,IAAA;AAEOC,IAAAA,cAAAA,CAAeH,GAAW,EAAQ;AACvC,QAAA,IAAI,CAACX,qBAAqB,EAAA,CAAGc,cAAc,CAACH,GAAAA,CAAAA;AAC9C,IAAA;IAEOI,cAAAA,GAAiB;QACtB,IAAI,CAACf,qBAAqB,EAAA,CAAGe,cAAc,EAAA;AAC7C,IAAA;AAEOC,IAAAA,sBAAAA,CAAuBC,MAA0B,EAAE;AACxD,QAAA,IAAI,CAACjB,qBAAqB,EAAA,CAAGgB,sBAAsB,CAACC,MAAAA,CAAAA;AACtD,IAAA;AAEOC,IAAAA,4BAAAA,CACLD,MAA0B,EACL;AACrB,QAAA,OAAO,IAAI,CAACjB,qBAAqB,EAAA,CAAGkB,4BAA4B,CAACD,MAAAA,CAAAA;AACnE,IAAA;IAEOE,YAAAA,GAA8B;AACnC,QAAA,OAAO,IAAI,CAACnB,qBAAqB,EAAA,CAAGmB,YAAY,EAAA;AAClD,IAAA;IAEOC,cAAAA,GAAiB;AACtB,QAAA,OAAO,IAAI,CAACpB,qBAAqB,EAAA,CAAGoB,cAAc,EAAA;AACpD,IAAA;IAEOC,mBAAAA,GAAqC;AAC1C,QAAA,OAAO,IAAI,CAACrB,qBAAqB,EAAA,CAAGqB,mBAAmB,EAAA;AACzD,IAAA;AAEOC,IAAAA,gBAAAA,CAAiBT,OAA6B,EAAE;AACrD,QAAA,IAAI,CAACb,qBAAqB,EAAA,CAAGsB,gBAAgB,CAACT,OAAAA,CAAAA;AAChD,IAAA;AAEOU,IAAAA,yBAAAA,CAA0BC,QAAoB,EAAc;AACjE,QAAA,OAAO,IAAI,CAACxB,qBAAqB,EAAA,CAAGuB,yBAAyB,CAACC,QAAAA,CAAAA;AAChE,IAAA;AAEOC,IAAAA,uBAAAA,CAAwBD,QAAoB,EAAc;AAC/D,QAAA,OAAO,IAAI,CAACxB,qBAAqB,EAAA,CAAGyB,uBAAuB,CAACD,QAAAA,CAAAA;AAC9D,IAAA;AACF;;;;"}