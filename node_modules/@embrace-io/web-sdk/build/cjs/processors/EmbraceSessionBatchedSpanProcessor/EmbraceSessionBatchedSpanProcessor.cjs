'use strict';

var core = require('@opentelemetry/core');
var EmbraceProcessor = require('../EmbraceProcessor/EmbraceProcessor.cjs');
var EmbraceSpanStorage = require('../../utils/EmbraceSpanStorage/EmbraceSpanStorage.cjs');
var attributes = require('../../constants/attributes.cjs');

const isSessionSpan = (span)=>span.attributes[attributes.KEY_EMB_TYPE] === attributes.EMB_TYPES.Session;
class EmbraceSessionBatchedSpanProcessor extends EmbraceProcessor.EmbraceProcessor {
    constructor({ exporter, limitManager, storage = window.localStorage, storedSpansExpireTimeoutMS, ...parentArgs }){
        super({
            ...parentArgs,
            processorName: 'EmbraceSessionBatchedSpanProcessor'
        }), this._pendingSpans = [], this._shutdown = ()=>{
            this._spanStorage.destroy();
            return this._exporter.shutdown();
        };
        this._exporter = exporter;
        this._shutdownOnce = new core.BindOnceFuture(this._shutdown, this);
        this._limitManager = limitManager;
        this._spanStorage = new EmbraceSpanStorage.EmbraceSpanStorage({
            storage,
            diag: parentArgs.diag,
            onExpiredSpansExport: (spans)=>{
                this._exportSpans(spans);
            },
            storedSpansExpireTimeoutMS
        });
    }
    forceFlush() {
        this.diag.debug('forceFlush called for EmbraceSessionBatchedSpanProcessor. This is a no op');
        return Promise.resolve(undefined);
    }
    onEnd(span) {
        if (this._shutdownOnce.isCalled) {
            this.diag.debug('span ended after processor shutdown. Ignoring span.');
            return;
        }
        if (!isSessionSpan(span)) {
            this.diag.debug('non-session span ended. Adding to pending spans queue.');
            if (this._limitManager.dropReadableSpan(span)) {
                return;
            }
            this._pendingSpans.push(span);
        } else {
            this.diag.debug('session span ended. Exporting all pending spans.');
            this._exportSpans([
                span,
                ...this._pendingSpans
            ]);
            this._pendingSpans = [];
        }
    }
    _exportSpans(spans) {
        core.internal._export(this._exporter, spans).then((result)=>{
            if (result.code === core.ExportResultCode.FAILED) {
                this.diag.error(`spans failed to export: ${result.error?.message || 'unknown error'}`);
            }
        })// Seems like everything related to the export logic does a good job of catching and only ever resolving with
        // an ExportResult even on failure: https://github.com/open-telemetry/opentelemetry-js/blob/cf6dffeebcf72c42b2cb4d2bf2db720369b53081/packages/opentelemetry-core/src/internal/exporter.ts#L37
        // Keep this block just in case that assumption changes in a future version
        .catch((reason)=>{
            let msg = 'unknown error';
            if (reason && reason instanceof Error) {
                msg = reason.message;
            } else if (typeof reason === 'string') {
                msg = reason;
            }
            this.diag.error(`spans failed to export: ${msg}`);
        });
    }
    onStart() {
    // do nothing.
    }
    getPendingSpansCount() {
        return this._pendingSpans.length;
    }
    storePendingSpans(sessionId, sessionSpan) {
        this._spanStorage.storePendingSpans(sessionId, sessionSpan, this._pendingSpans);
    }
    clearStoredSpans(sessionId) {
        this._spanStorage.clearStoredSpans(sessionId);
    }
    shutdown() {
        return this._shutdownOnce.call();
    }
}

exports.EmbraceSessionBatchedSpanProcessor = EmbraceSessionBatchedSpanProcessor;
//# sourceMappingURL=EmbraceSessionBatchedSpanProcessor.cjs.map
