'use strict';

var semanticConventions = require('@opentelemetry/semantic-conventions');

const SCHEME_RE = /.+:\/\/.+/;
const isNetworkSpan = (span)=>{
    if ((span.attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || // eslint-disable-next-line @typescript-eslint/no-deprecated
    span.attributes[semanticConventions.SEMATTRS_HTTP_METHOD]) && (typeof span.attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] === 'number' || // eslint-disable-next-line @typescript-eslint/no-deprecated
    typeof span.attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE] === 'number')) {
        const url = span.attributes[semanticConventions.ATTR_URL_FULL] ?? span.attributes[semanticConventions.SEMATTRS_HTTP_URL];
        return !!(url && typeof url === 'string' && SCHEME_RE.exec(url));
    }
    return false;
}; // not used yet, but added for clarity. This is the type for Embrace tagged network spans
 // interface EmbraceNetworkSpanAttributes extends Attributes {
 //   [KEY_EMB_TYPE]: EMB_TYPES.Network;
 // }
 // interface EmbraceNetworkSpan extends NetworkSpan {
 //   attributes: NetworkSpanAttributes & EmbraceNetworkSpanAttributes;
 // }

exports.isNetworkSpan = isNetworkSpan;
//# sourceMappingURL=types.cjs.map
