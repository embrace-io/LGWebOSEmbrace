{"version":3,"file":"EmbraceSpanSessionManager.cjs","sources":["../../../../src/managers/EmbraceSpanSessionManager/EmbraceSpanSessionManager.ts"],"sourcesContent":["import type {\n  Attributes,\n  DiagLogger,\n  HrTime,\n  Tracer,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport { diag, trace } from '@opentelemetry/api';\nimport { ATTR_SESSION_ID } from '@opentelemetry/semantic-conventions/incubating';\nimport type {\n  PropertyOptions,\n  ReasonSessionEnded,\n  StartSessionOptions,\n} from '../../api-sessions/index.js';\nimport {\n  EMB_STATES,\n  EMB_TYPES,\n  KEY_EMB_COLD_START,\n  KEY_EMB_FROM_STORAGE,\n  KEY_EMB_SDK_STARTUP_DURATION,\n  KEY_EMB_SESSION_NUMBER,\n  KEY_EMB_SESSION_REASON_ENDED,\n  KEY_EMB_SESSION_REASON_STARTED,\n  KEY_EMB_STATE,\n  KEY_EMB_TYPE,\n  KEY_PREFIX_EMB_PROPERTIES,\n  KEY_EMB_TAB_ID,\n  KEY_EMB_PARENT_TAB_ID,\n  KEY_EMB_EXPERIENCE_ID,\n} from '../../constants/index.js';\nimport type { PerformanceManager } from '../../utils/index.js';\nimport { generateUUID, OTelPerformanceManager } from '../../utils/index.js';\nimport type {\n  EmbraceSpanSessionManagerArgs,\n  LastTabActivity,\n  SessionEndedListener,\n  SessionStartedListener,\n  SpanSessionManagerInternal,\n  Tab,\n} from './types.js';\nimport type { VisibilityStateDocument } from '../../common/index.js';\nimport type { LimitManagerInternal } from '../EmbraceLimitManager/index.js';\nimport { EmbraceExtendedSpan } from '../index.js';\nimport type { ExtendedSpan } from '../../index.js';\nimport {\n  EMBRACE_SESSION_NUMBER_STORAGE_KEY,\n  EMBRACE_TAB_ACTIVITY_STORAGE_KEY,\n  EMBRACE_TAB_STORAGE_KEY,\n} from './constants.js';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-web';\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { getAppInstanceId } from '../../resources/index.js';\n\nconst PARENT_TAB_TIMEOUT_MS = 20_000; // Max age for parent tab detection\n\nexport class EmbraceSpanSessionManager implements SpanSessionManagerInternal {\n  private _activeSessionId: string | null = null;\n  private _activeSessionStartTime: HrTime | null = null;\n  private _sessionSpan: ExtendedSpan | null = null;\n  private _activeSessionCounts: Record<string, number> | null = null;\n  private _coldStart: boolean = true; // Whether the session was started from a new page load or not.\n  private _sdkStartupDuration: number = 0;\n  private readonly _sessionStartedListeners: Array<SessionStartedListener> = [];\n  private readonly _sessionEndedListeners: Array<SessionEndedListener> = [];\n  private readonly _currentTab: Tab;\n\n  private _tracer: Tracer;\n  private readonly _noExportTracer: Tracer;\n  private readonly _diag: DiagLogger;\n  private readonly _perf: PerformanceManager;\n  private readonly _visibilityDoc: VisibilityStateDocument;\n  private readonly _storage: Storage;\n  private readonly _sessionStorage: Storage;\n  private readonly _limitManager: LimitManagerInternal;\n  private readonly _referrer: string;\n\n  public constructor({\n    diag: diagParam,\n    perf,\n    visibilityDoc = window.document,\n    storage = window.localStorage,\n    sessionStorage = window.sessionStorage,\n    limitManager,\n    referrer = document.referrer,\n  }: EmbraceSpanSessionManagerArgs) {\n    this._diag =\n      diagParam ??\n      diag.createComponentLogger({\n        namespace: 'EmbraceSpanSessionManager',\n      });\n    this._perf = perf ?? new OTelPerformanceManager();\n    this._visibilityDoc = visibilityDoc;\n    this._storage = storage;\n    this._sessionStorage = sessionStorage;\n    this._limitManager = limitManager;\n    this._referrer = referrer;\n    this._tracer = trace.getTracer('embrace-web-sdk-sessions');\n    this._noExportTracer = new BasicTracerProvider().getTracer(\n      'embrace-web-sdk-sessions'\n    );\n\n    // Initialize cross-tab tracking\n    this._currentTab = this._initTab();\n    this._setupListeners();\n  }\n\n  // Collects all permanent session properties from localStorage\n  private _getPermanentAttributes(): Attributes {\n    const permanentAttributes = new Map();\n    try {\n      for (let i = 0; i < this._storage.length; i++) {\n        const key = this._storage.key(i);\n        if (key?.startsWith(KEY_PREFIX_EMB_PROPERTIES)) {\n          const value = this._storage.getItem(key);\n          if (value) {\n            permanentAttributes.set(key, value);\n          }\n        }\n      }\n    } catch (error) {\n      this._diag.warn('Error loading permanent session properties', error);\n    }\n    return Object.fromEntries(permanentAttributes.entries()) as Attributes;\n  }\n\n  // Increments and returns a global session counter shared across all tabs\n  // Race conditions are possible but acceptable for session numbering\n  public _getSessionNumber(): number {\n    try {\n      const value = this._storage.getItem(EMBRACE_SESSION_NUMBER_STORAGE_KEY);\n      let number = value ? parseInt(value, 10) : 0;\n      number++;\n      this._storage.setItem(\n        EMBRACE_SESSION_NUMBER_STORAGE_KEY,\n        number.toString()\n      );\n      return number;\n    } catch (e) {\n      this._diag.warn('Failed to retrieve session number from storage', e);\n      return 1;\n    }\n  }\n\n  public addBreadcrumb(name: string) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to add breadcrumb to a session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    const limitedBreadcrumb = this._limitManager.limitBreadcrumb(name);\n\n    if (limitedBreadcrumb === 'dropped') {\n      return;\n    }\n\n    this._sessionSpan.addEvent(\n      'emb-breadcrumb',\n      {\n        message: limitedBreadcrumb.name,\n      },\n      this._perf.getNowMillis()\n    );\n  }\n\n  public addProperty(\n    propertyKey: string,\n    value: string,\n    options?: PropertyOptions\n  ) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to add properties to a session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    const limitedSessionProperty = this._limitManager.limitSessionProperty(\n      propertyKey,\n      value\n    );\n\n    if (limitedSessionProperty === 'dropped') {\n      return;\n    }\n\n    const attributeKey = KEY_PREFIX_EMB_PROPERTIES + limitedSessionProperty.key;\n    this._sessionSpan.setAttribute(attributeKey, limitedSessionProperty.value);\n\n    if (options?.lifespan === 'permanent') {\n      try {\n        this._storage.setItem(attributeKey, value);\n      } catch (error) {\n        this._diag.warn('Failed to set permanent session property', error);\n      }\n    }\n  }\n\n  public removeProperty(propertyKey: string) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to remove a session property, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    // We truncate long session property keys on addProperty so need to apply the same logic here\n    const attributeKey =\n      KEY_PREFIX_EMB_PROPERTIES +\n      this._limitManager.truncateString('session_property_key', propertyKey);\n    this._sessionSpan.removeAttribute(attributeKey);\n\n    try {\n      if (this._storage.getItem(attributeKey)) {\n        this._storage.removeItem(attributeKey);\n      }\n    } catch (error) {\n      this._diag.warn('Error removing permanent session property', error);\n    }\n  }\n\n  // the external api doesn't include a reason, and if a users uses it to end a session, the reason will be 'manual'\n  // note: don't use this internally, this is just for user facing APIs. Use this.endSessionSpanInternal instead.\n  public endSessionSpan() {\n    this.endSessionSpanInternal('manual');\n  }\n\n  // endSessionSpanInternal is not part of the public API, but is used internally to end a session span adding a specific reason\n  public endSessionSpanInternal(reason: ReasonSessionEnded) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to end a session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    this._sessionSpan.setAttributes(this._endSessionSpanAttributes(reason));\n    this._sessionSpan.end();\n    this._sessionSpan = null;\n    this._activeSessionStartTime = null;\n    this._activeSessionId = null;\n    this._activeSessionCounts = null;\n\n    for (const listener of this._sessionEndedListeners) {\n      try {\n        listener();\n      } catch (error) {\n        this._diag.warn('Error while executing session ended listener', error);\n      }\n    }\n\n    // For the limit manager to add a session ended listener it would need a reference to this\n    // session manager which would create a circular dependency\n    this._limitManager.reset();\n  }\n\n  private _endSessionSpanAttributes(reason: ReasonSessionEnded): Attributes {\n    return {\n      ...this._getPermanentAttributes(),\n      [KEY_EMB_SESSION_REASON_ENDED]: reason,\n      ...this._activeSessionCounts,\n      ...this._limitManager.getDiagnosticCounts(),\n      [KEY_EMB_SDK_STARTUP_DURATION]: this._sdkStartupDuration,\n    };\n  }\n\n  // currentSessionAsReadableSpan creates a copy of the current session span with the same attributes\n  // that endSessionSpanInternal would add, but does not affect the original session span which remains active.\n  public currentSessionAsReadableSpan(\n    reason: ReasonSessionEnded\n  ): ReadableSpan | null {\n    if (!this._sessionSpan || !this._activeSessionStartTime) {\n      this._diag.debug(\n        'trying to end a session, but there is no session in progress. This is a no-op.'\n      );\n      return null;\n    }\n\n    // Create a new span with the same name and start time as the original session span,\n    // but using a new tracer so that it does not get exported.\n    const span = this._noExportTracer.startSpan('emb-session', {\n      startTime: this._activeSessionStartTime,\n      attributes: {\n        // Copy all current attributes from the original session span, plus the ending attributes\n        ...this._sessionSpan.attributes,\n        ...this._endSessionSpanAttributes(reason),\n        [KEY_EMB_FROM_STORAGE]: true,\n      },\n    });\n    span.end();\n    return span as unknown as ReadableSpan;\n  }\n\n  public getSessionId(): string | null {\n    return this._activeSessionId;\n  }\n\n  public getSessionSpan(): ExtendedSpan | null {\n    return this._sessionSpan;\n  }\n\n  public getSessionStartTime(): HrTime | null {\n    return this._activeSessionStartTime;\n  }\n\n  public startSessionSpan(options?: StartSessionOptions) {\n    // if there is a session already in progress, end it first\n    if (this._sessionSpan) {\n      this.endSessionSpanInternal('manual');\n    }\n\n    this._activeSessionId = generateUUID();\n    this._activeSessionStartTime = this._perf.getNowHRTime();\n    this._activeSessionCounts = {};\n\n    const attributes: Attributes = {\n      ...this._getPermanentAttributes(),\n      [KEY_EMB_TYPE]: EMB_TYPES.Session,\n      [KEY_EMB_STATE]:\n        this._visibilityDoc.visibilityState === 'hidden'\n          ? EMB_STATES.Background\n          : EMB_STATES.Foreground,\n      [ATTR_SESSION_ID]: this._activeSessionId,\n      [KEY_EMB_COLD_START]: this._coldStart,\n      [KEY_EMB_SESSION_NUMBER]: this._getSessionNumber(),\n      [KEY_EMB_EXPERIENCE_ID]: this._currentTab.experienceId,\n      [KEY_EMB_TAB_ID]: this._currentTab.tabId,\n    };\n\n    if (this._currentTab.parentTabId) {\n      attributes[KEY_EMB_PARENT_TAB_ID] = this._currentTab.parentTabId;\n    }\n\n    if (options?.reason) {\n      attributes[KEY_EMB_SESSION_REASON_STARTED] = options.reason;\n    }\n\n    this._sessionSpan = new EmbraceExtendedSpan(\n      this._tracer.startSpan('emb-session', {\n        attributes,\n      })\n    );\n\n    this._coldStart = false;\n\n    for (const listener of this._sessionStartedListeners) {\n      try {\n        listener();\n      } catch (error) {\n        this._diag.warn(\n          'Error while executing session started listener',\n          error\n        );\n      }\n    }\n  }\n\n  public incrSessionCountForKey(key: string) {\n    if (!this._sessionSpan || !this._activeSessionCounts) {\n      this._diag.debug(\n        'trying to increment a count for the active session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    this._activeSessionCounts[key] = (this._activeSessionCounts[key] || 0) + 1;\n  }\n\n  public addSessionStartedListener(listener: SessionStartedListener) {\n    const listenerIndex = this._sessionStartedListeners.push(listener);\n\n    return () => {\n      this._sessionStartedListeners.splice(listenerIndex - 1, 1);\n    };\n  }\n\n  public addSessionEndedListener(listener: SessionEndedListener) {\n    const listenerIndex = this._sessionEndedListeners.push(listener);\n\n    return () => {\n      this._sessionEndedListeners.splice(listenerIndex - 1, 1);\n    };\n  }\n\n  public recordSDKStartupDuration(duration: number) {\n    this._sdkStartupDuration = Math.ceil(duration);\n  }\n\n  public setTracerProvider(tracerProvider: TracerProvider) {\n    this._tracer = tracerProvider.getTracer('embrace-web-sdk-sessions');\n  }\n\n  private _initTab(): Tab {\n    // On page reload, preserve the same tab IDs\n    try {\n      const stored = this._sessionStorage.getItem(EMBRACE_TAB_STORAGE_KEY);\n      if (stored) {\n        return JSON.parse(stored) as Tab;\n      }\n    } catch (e) {\n      this._diag.warn('Failed to retrieve current tab data', e);\n    }\n\n    // Look for potential parent tabs\n    const parentActivity = this._findParentFromLastActivity();\n    const currentTab: Tab = {\n      experienceId: parentActivity?.experienceId ?? generateUUID(),\n      parentTabId: parentActivity?.tabId,\n      tabId: getAppInstanceId(this._sessionStorage, this._diag),\n    };\n\n    // Persist tab data for page reloads\n    try {\n      this._sessionStorage.setItem(\n        EMBRACE_TAB_STORAGE_KEY,\n        JSON.stringify(currentTab)\n      );\n    } catch (e) {\n      this._diag.warn('Failed to store current tab data', e);\n    }\n\n    return currentTab;\n  }\n\n  private _findParentFromLastActivity(): LastTabActivity | null {\n    // Only look for parent if we have a referrer from the same origin\n    if (!this._referrer) {\n      return null;\n    }\n\n    try {\n      const referrerUrl = new URL(this._referrer);\n      if (referrerUrl.origin !== window.location.origin) {\n        return null;\n      }\n    } catch {\n      return null;\n    }\n\n    // Check if there's a recent tab activity that could be the parent\n    const lastActivity = this._getLastTabActivity();\n    if (!lastActivity) {\n      return null;\n    }\n\n    const now = Date.now();\n    const age = now - lastActivity.lastActivityMs;\n\n    // Return activity if it's recent enough to be the parent\n    if (age <= PARENT_TAB_TIMEOUT_MS) {\n      return lastActivity;\n    }\n\n    return null;\n  }\n\n  // Retrieves the last tab activity from localStorage\n  private _getLastTabActivity(): LastTabActivity | null {\n    try {\n      const stored = this._storage.getItem(EMBRACE_TAB_ACTIVITY_STORAGE_KEY);\n      if (!stored) {\n        return null;\n      }\n\n      return JSON.parse(stored) as LastTabActivity;\n    } catch (e) {\n      this._diag.warn('Failed to retrieve last tab activity', e);\n      return null;\n    }\n  }\n\n  // Saves the last tab activity to localStorage\n  private _saveLastTabActivity(activity: LastTabActivity): void {\n    try {\n      this._storage.setItem(\n        EMBRACE_TAB_ACTIVITY_STORAGE_KEY,\n        JSON.stringify(activity)\n      );\n    } catch (error) {\n      this._diag.warn('Failed to save last tab activity', error);\n    }\n  }\n\n  // Records activity for this tab\n  private _recordActivity(): void {\n    const activity: LastTabActivity = {\n      tabId: this._currentTab.tabId,\n      experienceId: this._currentTab.experienceId,\n      lastActivityMs: Date.now(),\n    };\n\n    this._saveLastTabActivity(activity);\n  }\n\n  // Sets up event listeners for tracking tab activity\n  private _setupListeners(): void {\n    // Track clicks that might open new tabs\n    const handleNewTabClick = (ev: MouseEvent) => {\n      // Check for modifier keys that open new tabs/windows\n      if (\n        ev.button === 1 || // Middle click\n        ev.ctrlKey ||\n        ev.metaKey || // Cmd/Ctrl + click\n        ev.shiftKey // Shift + click (new window)\n      ) {\n        this._recordActivity();\n        return;\n      }\n\n      // Check for elements with attributes that open new tabs\n      const newTabAnchor = (ev.target as HTMLElement | null)?.closest(\n        'a[target=\"_blank\"], form[target=\"_blank\"], a[rel*=\"noopener\"], a[rel*=\"noreferrer\"]'\n      );\n      if (newTabAnchor) {\n        this._recordActivity();\n      }\n    };\n\n    // Capture phase ensures we record before navigation\n    const options = { capture: true, passive: true };\n    document.addEventListener('auxclick', handleNewTabClick, options);\n    document.addEventListener('click', handleNewTabClick, options);\n  }\n}\n"],"names":["PARENT_TAB_TIMEOUT_MS","EmbraceSpanSessionManager","diag","diagParam","perf","visibilityDoc","window","document","storage","localStorage","sessionStorage","limitManager","referrer","_activeSessionId","_activeSessionStartTime","_sessionSpan","_activeSessionCounts","_coldStart","_sdkStartupDuration","_sessionStartedListeners","_sessionEndedListeners","_diag","createComponentLogger","namespace","_perf","OTelPerformanceManager","_visibilityDoc","_storage","_sessionStorage","_limitManager","_referrer","_tracer","trace","getTracer","_noExportTracer","BasicTracerProvider","_currentTab","_initTab","_setupListeners","_getPermanentAttributes","permanentAttributes","Map","i","length","key","startsWith","KEY_PREFIX_EMB_PROPERTIES","value","getItem","set","error","warn","Object","fromEntries","entries","_getSessionNumber","EMBRACE_SESSION_NUMBER_STORAGE_KEY","number","parseInt","setItem","toString","e","addBreadcrumb","name","debug","limitedBreadcrumb","limitBreadcrumb","addEvent","message","getNowMillis","addProperty","propertyKey","options","limitedSessionProperty","limitSessionProperty","attributeKey","setAttribute","lifespan","removeProperty","truncateString","removeAttribute","removeItem","endSessionSpan","endSessionSpanInternal","reason","setAttributes","_endSessionSpanAttributes","end","listener","reset","KEY_EMB_SESSION_REASON_ENDED","getDiagnosticCounts","KEY_EMB_SDK_STARTUP_DURATION","currentSessionAsReadableSpan","span","startSpan","startTime","attributes","KEY_EMB_FROM_STORAGE","getSessionId","getSessionSpan","getSessionStartTime","startSessionSpan","generateUUID","getNowHRTime","KEY_EMB_TYPE","EMB_TYPES","Session","KEY_EMB_STATE","visibilityState","EMB_STATES","Background","Foreground","ATTR_SESSION_ID","KEY_EMB_COLD_START","KEY_EMB_SESSION_NUMBER","KEY_EMB_EXPERIENCE_ID","experienceId","KEY_EMB_TAB_ID","tabId","parentTabId","KEY_EMB_PARENT_TAB_ID","KEY_EMB_SESSION_REASON_STARTED","EmbraceExtendedSpan","incrSessionCountForKey","addSessionStartedListener","listenerIndex","push","splice","addSessionEndedListener","recordSDKStartupDuration","duration","Math","ceil","setTracerProvider","tracerProvider","stored","EMBRACE_TAB_STORAGE_KEY","JSON","parse","parentActivity","_findParentFromLastActivity","currentTab","getAppInstanceId","stringify","referrerUrl","URL","origin","location","lastActivity","_getLastTabActivity","now","Date","age","lastActivityMs","EMBRACE_TAB_ACTIVITY_STORAGE_KEY","_saveLastTabActivity","activity","_recordActivity","handleNewTabClick","ev","button","ctrlKey","metaKey","shiftKey","newTabAnchor","target","closest","capture","passive","addEventListener"],"mappings":"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"}