{"version":3,"file":"EmbraceDynamicConfigManager.cjs","sources":["../../../../src/managers/EmbraceConfigManager/EmbraceDynamicConfigManager.ts"],"sourcesContent":["import type {\n  RemoteConfig,\n  EmbraceDynamicConfigManagerArgs,\n  StoredRemoteConfig,\n} from './types.js';\nimport { getConfigURL } from './utils.js';\nimport { diag } from '@opentelemetry/api';\nimport type { DiagLogger } from '@opentelemetry/api';\nimport {\n  DEFAULT_CONFIG,\n  LOCAL_STORAGE_REMOTE_CONFIG_KEY,\n} from './constants.js';\nimport type {\n  DynamicConfigManager,\n  DynamicSDKConfig,\n} from '../../sdk/index.js';\n\nconst parseRemoteConfig = (remoteConfig: RemoteConfig): DynamicSDKConfig => {\n  const parsed: DynamicSDKConfig = {\n    samplingPct: remoteConfig.threshold,\n  };\n\n  if (remoteConfig.network_span_forwarding !== undefined) {\n    parsed.networkSpansForwardingThreshold =\n      remoteConfig.network_span_forwarding.pct_enabled;\n  }\n\n  return parsed;\n};\n\nexport class EmbraceDynamicConfigManager implements DynamicConfigManager {\n  // Set to null if appID is not provided, in that case only rely on local config\n  private readonly _remoteConfigURL: string | null = null;\n  private readonly _diag: DiagLogger;\n  private readonly _storage: Storage;\n\n  private _sdkConfig: DynamicSDKConfig;\n  private _etag: string | null = null;\n\n  public constructor({\n    appID,\n    appVersion,\n    deviceId,\n    diag: diagParam = diag.createComponentLogger({\n      namespace: 'embrace-config-manager',\n    }),\n    storage = localStorage,\n    // Allow users to provide a default config\n    defaultConfig = {},\n    embraceConfigURL,\n  }: EmbraceDynamicConfigManagerArgs = {}) {\n    if (appID && appVersion && deviceId) {\n      this._remoteConfigURL = getConfigURL(\n        appID,\n        {\n          appVersion,\n          deviceId,\n          // TODO: Replace with actual OS version once we start capturing it\n          osVersion: '1',\n        },\n        embraceConfigURL\n      );\n    }\n\n    this._diag = diagParam;\n    this._storage = storage;\n\n    const storedRemoteConfig = this._getRemoteConfigFromStorage();\n\n    if (storedRemoteConfig) {\n      this._etag = storedRemoteConfig.etag;\n    }\n\n    this._sdkConfig = {\n      // Merge the default config with any user-provided defaults\n      // making sure user-provided values take precedence\n      ...DEFAULT_CONFIG,\n      ...defaultConfig,\n      // Stored remote config values will override both defaults and user-provided defaults\n      ...(storedRemoteConfig\n        ? parseRemoteConfig(storedRemoteConfig.config)\n        : {}),\n    };\n  }\n\n  public setConfig(config: Partial<DynamicSDKConfig>): void {\n    this._sdkConfig = {\n      ...this._sdkConfig,\n      ...config,\n    };\n  }\n\n  public getConfig(): DynamicSDKConfig {\n    return this._sdkConfig;\n  }\n\n  // No-op if not sending data to embrace\n  public async refreshRemoteConfig(): Promise<void> {\n    if (!this._remoteConfigURL) {\n      return;\n    }\n\n    try {\n      const remoteConfigResponse = await this._fetchRemoteConfig(\n        this._remoteConfigURL\n      );\n\n      if (!remoteConfigResponse) {\n        this._diag.debug('No changes in remote config, skipping update');\n        return;\n      }\n\n      const [remoteConfig, etag] = remoteConfigResponse;\n      this._storage.setItem(\n        LOCAL_STORAGE_REMOTE_CONFIG_KEY,\n        JSON.stringify({\n          config: remoteConfig,\n          etag,\n        } as StoredRemoteConfig)\n      );\n\n      this._sdkConfig = parseRemoteConfig(remoteConfig);\n      this._etag = etag;\n    } catch (error: unknown) {\n      this._diag.warn(\n        `Failed to refresh remote config: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  private _getRemoteConfigFromStorage(): StoredRemoteConfig | null {\n    try {\n      const configString = this._storage.getItem(\n        LOCAL_STORAGE_REMOTE_CONFIG_KEY\n      );\n\n      if (configString) {\n        return JSON.parse(configString) as StoredRemoteConfig;\n      }\n\n      return null;\n    } catch (error) {\n      this._diag.warn(\n        `Failed to parse remote config from storage: ${error instanceof Error ? error.message : String(error)}`\n      );\n\n      return null;\n    }\n  }\n\n  private async _fetchRemoteConfig(\n    url: string\n  ): Promise<[RemoteConfig, string | null] | null> {\n    const response = await fetch(url, {\n      headers: this._etag ? { 'If-None-Match': this._etag } : {},\n    });\n\n    const etag = response.headers.get('etag');\n\n    // Nothing changed, return null\n    if (response.status === 304) {\n      return null;\n    }\n\n    if (!response.ok) {\n      this._diag.warn(\n        `Failed to fetch remote config from ${url}: ${response.statusText}`\n      );\n\n      return null;\n    }\n\n    const remoteConfig = (await response.json()) as RemoteConfig;\n\n    return [remoteConfig, etag];\n  }\n}\n"],"names":["parseRemoteConfig","remoteConfig","parsed","samplingPct","threshold","network_span_forwarding","undefined","networkSpansForwardingThreshold","pct_enabled","EmbraceDynamicConfigManager","appID","appVersion","deviceId","diag","diagParam","createComponentLogger","namespace","storage","localStorage","defaultConfig","embraceConfigURL","_remoteConfigURL","_etag","getConfigURL","osVersion","_diag","_storage","storedRemoteConfig","_getRemoteConfigFromStorage","etag","_sdkConfig","DEFAULT_CONFIG","config","setConfig","getConfig","refreshRemoteConfig","remoteConfigResponse","_fetchRemoteConfig","debug","setItem","LOCAL_STORAGE_REMOTE_CONFIG_KEY","JSON","stringify","error","warn","Error","message","String","configString","getItem","parse","url","response","fetch","headers","get","status","ok","statusText","json"],"mappings":"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"}