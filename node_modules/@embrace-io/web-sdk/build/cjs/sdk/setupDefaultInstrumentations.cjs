'use strict';

var SpanSessionOnLoadInstrumentation = require('../instrumentations/session/SpanSessionOnLoadInstrumentation/SpanSessionOnLoadInstrumentation.cjs');
var SpanSessionVisibilityInstrumentation = require('../instrumentations/session/SpanSessionVisibilityInstrumentation/SpanSessionVisibilityInstrumentation.cjs');
var SpanSessionBrowserActivityInstrumentation = require('../instrumentations/session/SpanSessionBrowserActivityInstrumentation/SpanSessionBrowserActivityInstrumentation.cjs');
var SpanSessionTimeoutInstrumentation = require('../instrumentations/session/SpanSessionTimeoutInstrumentation/SpanSessionTimeoutInstrumentation.cjs');
var GlobalExceptionInstrumentation = require('../instrumentations/exceptions/GlobalExceptionInstrumentation/GlobalExceptionInstrumentation.cjs');
var ClicksInstrumentation = require('../instrumentations/clicks/ClicksInstrumentation/ClicksInstrumentation.cjs');
var WebVitalsInstrumentation = require('../instrumentations/web-vitals/WebVitalsInstrumentation/WebVitalsInstrumentation.cjs');
var DocumentLoadInstrumentation = require('../instrumentations/document-load/DocumentLoadInstrumentation/DocumentLoadInstrumentation.cjs');
var EmbraceFetchInstrumentation = require('../instrumentations/fetch/EmbraceFetchInstrumentation/EmbraceFetchInstrumentation.cjs');
var EmbraceXHRInstrumentation = require('../instrumentations/xhr/EmbraceXHRInstrumentation/EmbraceXHRInstrumentation.cjs');
var EmbraceInstrumentationBase = require('../instrumentations/EmbraceInstrumentationBase/EmbraceInstrumentationBase.cjs');

const setupDefaultInstrumentations = (config = {}, { logManager, spanSessionManager, embraceSpanProcessor } = {})=>{
    /*
    These instrumentations are core to managing the session lifecycle and so are not optional
   */ const instrumentations = [
        new SpanSessionOnLoadInstrumentation.SpanSessionOnLoadInstrumentation(config['session-on-load']),
        new SpanSessionVisibilityInstrumentation.SpanSessionVisibilityInstrumentation(config['session-visibility'], embraceSpanProcessor),
        new SpanSessionBrowserActivityInstrumentation.SpanSessionBrowserActivityInstrumentation(config['session-activity']),
        new SpanSessionTimeoutInstrumentation.SpanSessionTimeoutInstrumentation(config['session-timeout'])
    ];
    if (!config.omit?.has('exception')) {
        instrumentations.push(new GlobalExceptionInstrumentation.GlobalExceptionInstrumentation(config['exception']));
    }
    if (!config.omit?.has('click')) {
        instrumentations.push(new ClicksInstrumentation.ClicksInstrumentation(config['click']));
    }
    if (!config.omit?.has('web-vital')) {
        instrumentations.push(new WebVitalsInstrumentation.WebVitalsInstrumentation(config['web-vital']));
    }
    if (!config.omit?.has('document-load')) {
        instrumentations.push(new DocumentLoadInstrumentation.DocumentLoadInstrumentation(config['document-load']));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-fetch')) {
        instrumentations.push(new EmbraceFetchInstrumentation.EmbraceFetchInstrumentation({
            ...config['network'],
            ...config['@opentelemetry/instrumentation-fetch']
        }));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-xml-http-request')) {
        instrumentations.push(new EmbraceXHRInstrumentation.EmbraceXHRInstrumentation({
            ...config['network'],
            ...config['@opentelemetry/instrumentation-xml-http-request']
        }));
    }
    for (const instrumentation of instrumentations){
        if (instrumentation instanceof EmbraceInstrumentationBase.EmbraceInstrumentationBase) {
            if (spanSessionManager) {
                instrumentation.setSessionManager(spanSessionManager);
            }
            if (logManager) {
                instrumentation.setLogManager(logManager);
            }
        }
    }
    return instrumentations;
};

exports.setupDefaultInstrumentations = setupDefaultInstrumentations;
//# sourceMappingURL=setupDefaultInstrumentations.cjs.map
