import * as React from 'react';
import type { PropsWithChildren } from 'react';
type EmbraceErrorBoundaryProps = {
    fallback: () => React.ReactNode;
};
type EmbraceErrorBoundaryState = {
    hasError: boolean;
};
export declare class EmbraceErrorBoundary<P extends PropsWithChildren<EmbraceErrorBoundaryProps>> extends React.Component<P, EmbraceErrorBoundaryState> {
    private readonly _logManager;
    constructor(props: P);
    static getDerivedStateFromError(): {
        hasError: boolean;
    };
    componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void;
    render(): string | number | bigint | boolean | React.ReactElement<unknown, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode> | Promise<string | number | bigint | boolean | React.ReactElement<unknown, string | React.JSXElementConstructor<any>> | React.ReactPortal | Iterable<React.ReactNode> | null | undefined> | P["children"] | null | undefined;
}
export {};
//# sourceMappingURL=EmbraceErrorBoundary.d.ts.map