import { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/index.js';
import type { DocumentLoadInstrumentationConfig } from './types.js';
export declare class DocumentLoadInstrumentation extends EmbraceInstrumentationBase<DocumentLoadInstrumentationConfig> {
    private readonly _onDocumentLoaded;
    constructor({ diag, perf, enabled, applyCustomAttributesOnSpan, ignorePerformancePaintEvents, ignoreNetworkEvents, }?: DocumentLoadInstrumentationConfig);
    protected init(): void;
    /**
     * Adds spans for all resources
     * @param rootSpan
     */
    private _addResourcesSpans;
    /**
     * Collects information about performance and creates appropriate spans
     */
    private _collectPerformance;
    /**
     * Helper function for ending span
     * @param span
     * @param performanceName name of performance entry for time end
     * @param entries
     */
    private _endSpan;
    /**
     * Creates and ends a span with network information about resource added as timed events
     * @param resource
     * @param parentSpan
     */
    private _initResourceSpan;
    /**
     * Helper function for starting a span
     * @param spanName name of span
     * @param performanceName name of performance entry for time start
     * @param entries
     * @param parentSpan
     */
    private _startSpan;
    /**
     * executes callback {_onDocumentLoaded} when the page is loaded
     */
    private _waitForPageLoad;
    /**
     * adds custom attributes to root span if configured
     */
    private _addCustomAttributesOnSpan;
    /**
     * adds custom attributes to span if configured
     */
    private _addCustomAttributesOnResourceSpan;
    enable(): void;
    disable(): void;
}
//# sourceMappingURL=DocumentLoadInstrumentation.d.ts.map