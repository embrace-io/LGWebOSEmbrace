import type { DiagLogger, Span } from '@opentelemetry/api';
import type { ReadableSpan, SpanProcessor } from '@opentelemetry/sdk-trace-web';
import type { EmbraceProcessorArgs } from './types.js';
export declare abstract class EmbraceProcessor implements SpanProcessor {
    private readonly _diag;
    private readonly _processorName;
    protected constructor({ diag: providedDiag, processorName, }: EmbraceProcessorArgs);
    protected get diag(): DiagLogger;
    protected get processorName(): string;
    abstract forceFlush(): Promise<void>;
    abstract onEnd(span: ReadableSpan): void;
    abstract onStart(span: Span): void;
    /**
     * Returns the number of spans currently pending export.
     *
     * @returns The number of pending spans in the internal queue
     */
    abstract getPendingSpansCount(): number;
    /**
     * Serializes and stores the current pending spans to storage for persistence.
     * It also includes the sessionSpan passed as parameter to be included in the storage.
     *
     * These spans can later be either cleared out by using clearStoredSpans()
     * or they will eventually be exported after certain time passes
     *
     * @param sessionId - The session ID to associate with the stored spans.
     * @param sessionSpan - The session span to be included in the stored spans.
     */
    abstract storePendingSpans(sessionId: string, sessionSpan: ReadableSpan): void;
    /**
     * Removes all stored spans for a specific session from storage.
     *
     * This should be used to continue a session, and follow the regular export process.
     *
     * @param sessionId - The session ID whose stored spans should be cleared
     */
    abstract clearStoredSpans(sessionId: string): void;
    abstract shutdown(): Promise<void>;
}
//# sourceMappingURL=EmbraceProcessor.d.ts.map