import { SpanSessionOnLoadInstrumentation } from '../instrumentations/session/SpanSessionOnLoadInstrumentation/SpanSessionOnLoadInstrumentation.js';
import { SpanSessionVisibilityInstrumentation } from '../instrumentations/session/SpanSessionVisibilityInstrumentation/SpanSessionVisibilityInstrumentation.js';
import { SpanSessionBrowserActivityInstrumentation } from '../instrumentations/session/SpanSessionBrowserActivityInstrumentation/SpanSessionBrowserActivityInstrumentation.js';
import { SpanSessionTimeoutInstrumentation } from '../instrumentations/session/SpanSessionTimeoutInstrumentation/SpanSessionTimeoutInstrumentation.js';
import { GlobalExceptionInstrumentation } from '../instrumentations/exceptions/GlobalExceptionInstrumentation/GlobalExceptionInstrumentation.js';
import { ClicksInstrumentation } from '../instrumentations/clicks/ClicksInstrumentation/ClicksInstrumentation.js';
import { WebVitalsInstrumentation } from '../instrumentations/web-vitals/WebVitalsInstrumentation/WebVitalsInstrumentation.js';
import { DocumentLoadInstrumentation } from '../instrumentations/document-load/DocumentLoadInstrumentation/DocumentLoadInstrumentation.js';
import { EmbraceFetchInstrumentation } from '../instrumentations/fetch/EmbraceFetchInstrumentation/EmbraceFetchInstrumentation.js';
import { EmbraceXHRInstrumentation } from '../instrumentations/xhr/EmbraceXHRInstrumentation/EmbraceXHRInstrumentation.js';
import { EmbraceInstrumentationBase } from '../instrumentations/EmbraceInstrumentationBase/EmbraceInstrumentationBase.js';

const setupDefaultInstrumentations = (config = {}, { logManager, spanSessionManager, embraceSpanProcessor } = {})=>{
    /*
    These instrumentations are core to managing the session lifecycle and so are not optional
   */ const instrumentations = [
        new SpanSessionOnLoadInstrumentation(config['session-on-load']),
        new SpanSessionVisibilityInstrumentation(config['session-visibility'], embraceSpanProcessor),
        new SpanSessionBrowserActivityInstrumentation(config['session-activity']),
        new SpanSessionTimeoutInstrumentation(config['session-timeout'])
    ];
    if (!config.omit?.has('exception')) {
        instrumentations.push(new GlobalExceptionInstrumentation(config['exception']));
    }
    if (!config.omit?.has('click')) {
        instrumentations.push(new ClicksInstrumentation(config['click']));
    }
    if (!config.omit?.has('web-vital')) {
        instrumentations.push(new WebVitalsInstrumentation(config['web-vital']));
    }
    if (!config.omit?.has('document-load')) {
        instrumentations.push(new DocumentLoadInstrumentation(config['document-load']));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-fetch')) {
        instrumentations.push(new EmbraceFetchInstrumentation({
            ...config['network'],
            ...config['@opentelemetry/instrumentation-fetch']
        }));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-xml-http-request')) {
        instrumentations.push(new EmbraceXHRInstrumentation({
            ...config['network'],
            ...config['@opentelemetry/instrumentation-xml-http-request']
        }));
    }
    for (const instrumentation of instrumentations){
        if (instrumentation instanceof EmbraceInstrumentationBase) {
            if (spanSessionManager) {
                instrumentation.setSessionManager(spanSessionManager);
            }
            if (logManager) {
                instrumentation.setLogManager(logManager);
            }
        }
    }
    return instrumentations;
};

export { setupDefaultInstrumentations };
//# sourceMappingURL=setupDefaultInstrumentations.js.map
