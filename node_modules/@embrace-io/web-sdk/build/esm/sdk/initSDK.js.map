{"version":3,"file":"initSDK.js","sources":["../../../src/sdk/initSDK.ts"],"sourcesContent":["import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { emptyResource } from '@opentelemetry/resources';\nimport type { LogRecordProcessor } from '@opentelemetry/sdk-logs';\nimport {\n  BatchLogRecordProcessor,\n  LoggerProvider,\n} from '@opentelemetry/sdk-logs';\nimport {\n  StackContextManager,\n  BatchSpanProcessor,\n  WebTracerProvider,\n} from '@opentelemetry/sdk-trace-web';\nimport type { SpanProcessor } from '@opentelemetry/sdk-trace-web';\nimport { session } from '../api-sessions/index.js';\nimport { user } from '../api-users/index.js';\nimport {\n  EmbraceLogExporter,\n  EmbraceTraceExporter,\n} from '../exporters/index.js';\nimport {\n  DEFAULT_LIMITS,\n  EmbraceDynamicConfigManager,\n  EmbraceLimitManager,\n  EmbraceLogManager,\n  EmbraceSDKFeaturesManager,\n  EmbraceSpanSessionManager,\n  EmbraceTraceManager,\n  EmbraceUserManager,\n} from '../managers/index.js';\nimport {\n  EmbraceLogRecordProcessor,\n  EmbraceNetworkSpanProcessor,\n  EmbraceSessionBatchedSpanProcessor,\n  IdentifiableSessionLogRecordProcessor,\n  LogRecordScrubProcessor,\n  SpanScrubProcessor,\n  UserLogRecordProcessor,\n  UserSpanProcessor,\n} from '../processors/index.js';\nimport { getWebSDKResource } from '../resources/index.js';\nimport { isValidAppID } from './utils.js';\nimport { setupDefaultInstrumentations } from './setupDefaultInstrumentations.js';\nimport { createSessionSpanProcessor } from '@opentelemetry/web-common';\nimport { log } from '../api-logs/index.js';\nimport { trace } from '../api-traces/index.js';\nimport type {\n  DynamicSDKConfig,\n  SDKControl,\n  SDKInitConfig,\n  SetupLogsArgs,\n  SetupSessionArgs,\n  SetupTracesArgs,\n  SetupUserArgs,\n} from './types.js';\nimport { registry } from './registry.js';\nimport { getDefaultAttributeScrubbers } from './defaultAttributeScrubbers.js';\nimport type { AttributeScrubber } from '../common/index.js';\nimport { OTelPerformanceManager, nsfConfigValidation } from '../utils/index.js';\nimport { EmbraceW3CTraceContextPropagator } from '../propagators/index.js';\n\nexport const initSDK = (\n  {\n    appID,\n    appVersion,\n    resource = emptyResource(),\n    spanExporters = [],\n    logExporters = [],\n    spanProcessors = [],\n    propagator = null,\n    defaultInstrumentationConfig,\n    instrumentations = [],\n    contextManager = null,\n    logProcessors = [],\n    attributeScrubbers = [],\n    enableDefaultAttributeScrubbing = true,\n    additionalQueryParamsToScrub = [],\n    logLevel = DiagLogLevel.ERROR,\n    embraceDataURL,\n    embraceConfigURL,\n    diagLogger = diag.createComponentLogger({\n      namespace: 'embrace-sdk',\n    }),\n    dynamicSDKConfigManager: providedDynamicSDKConfigManager,\n    dynamicSDKConfig,\n    registerGlobally = true,\n    blockNetworkSpanForwarding = false,\n  }: SDKInitConfig = { appID: '' }\n): SDKControl | false => {\n  try {\n    const perf = new OTelPerformanceManager();\n    const initSDKStart = perf.getNowMillis();\n\n    if (registerGlobally) {\n      const existingSDK = registry.registered();\n      if (existingSDK !== null) {\n        diagLogger.warn(\n          'SDK has already been successfully initialized, skipping this invocation of initSDK'\n        );\n        return existingSDK;\n      }\n    }\n\n    diag.setLogger(new DiagConsoleLogger(), {\n      logLevel,\n    });\n\n    const resourceWithWebSDKAttributes = resource.merge(\n      getWebSDKResource({\n        diagLogger,\n        appVersion,\n        pageSessionStorage: window.sessionStorage,\n      })\n    );\n\n    const sendingToEmbrace = !!appID && isValidAppID(appID);\n\n    if (!sendingToEmbrace && !logExporters.length && !spanExporters.length) {\n      throw new Error(\n        'when the embrace appID is omitted then at least one logExporter or spanExporter must be set'\n      );\n    }\n\n    const userManager = setupUser({ registerGlobally });\n    const enduserPseudoID = userManager.getEmbraceUserId();\n    if (sendingToEmbrace && !enduserPseudoID) {\n      throw new Error('userID is required when using Embrace exporter');\n    }\n\n    const dynamicConfigManager =\n      providedDynamicSDKConfigManager ??\n      new EmbraceDynamicConfigManager({\n        appID,\n        appVersion,\n        embraceConfigURL,\n        defaultConfig: dynamicSDKConfig,\n        deviceId: enduserPseudoID,\n      });\n    void dynamicConfigManager.refreshRemoteConfig();\n\n    const sdkFeaturesManager = new EmbraceSDKFeaturesManager({\n      dynamicConfigManager,\n      deviceId: enduserPseudoID,\n      blockNetworkSpanForwarding,\n    });\n\n    if (!sdkFeaturesManager.isSDKEnabled()) {\n      diagLogger.debug('SDK is disabled, skipping initialization.');\n\n      return false;\n    }\n\n    const nsfValid = nsfConfigValidation({\n      featureManager: sdkFeaturesManager,\n      diag: diagLogger,\n      registerGlobally,\n      defaultInstrumentationConfig,\n      propagator,\n    });\n\n    const limitManager = new EmbraceLimitManager(DEFAULT_LIMITS);\n\n    const finalAttributeScrubbers: AttributeScrubber[] = [\n      ...(enableDefaultAttributeScrubbing\n        ? getDefaultAttributeScrubbers(additionalQueryParamsToScrub)\n        : []),\n      ...attributeScrubbers,\n    ];\n\n    const spanSessionManager = setupSession({\n      limitManager,\n      registerGlobally,\n    });\n\n    let embraceSpanProcessor: EmbraceSessionBatchedSpanProcessor | undefined;\n    let embraceLogProcessor: BatchLogRecordProcessor | undefined;\n    if (sendingToEmbrace) {\n      embraceSpanProcessor = new EmbraceSessionBatchedSpanProcessor({\n        exporter: new EmbraceTraceExporter({\n          appID,\n          embraceDataURL,\n          userID: enduserPseudoID,\n        }),\n        limitManager,\n        storedSpansExpireTimeoutMS:\n          defaultInstrumentationConfig?.['session-visibility']\n            ?.storedSpansExpireTimeoutMS,\n      });\n\n      embraceLogProcessor = new BatchLogRecordProcessor(\n        new EmbraceLogExporter({\n          appID,\n          embraceDataURL,\n          userID: enduserPseudoID,\n        })\n      );\n    }\n\n    const { tracerProvider, embraceTraceManager } = setupTraces({\n      resource: resourceWithWebSDKAttributes,\n      spanSessionManager,\n      userManager,\n      spanExporters,\n      spanProcessors,\n      propagator: nsfValid\n        ? new EmbraceW3CTraceContextPropagator()\n        : propagator,\n      contextManager,\n      attributeScrubbers: finalAttributeScrubbers,\n      registerGlobally,\n      embraceSpanProcessor,\n    });\n\n    spanSessionManager.setTracerProvider(tracerProvider);\n\n    const { loggerProvider, embraceLogManager } = setupLogs({\n      resource: resourceWithWebSDKAttributes,\n      userManager,\n      logExporters,\n      logProcessors,\n      spanSessionManager,\n      limitManager,\n      attributeScrubbers: finalAttributeScrubbers,\n      registerGlobally,\n      embraceLogProcessor,\n    });\n\n    // NOTE: we require setupInstrumentation to run the last, after setupLogs and setupTraces. This is how OTel works wrt\n    // the dependencies between instrumentations and global providers. We need the providers for tracers, and logs to be\n    // setup before we enable instrumentations.\n    if (!registerGlobally) {\n      registerInstrumentations({\n        tracerProvider,\n        loggerProvider,\n        instrumentations: [\n          setupDefaultInstrumentations(defaultInstrumentationConfig, {\n            logManager: embraceLogManager,\n            spanSessionManager,\n            embraceSpanProcessor,\n          }),\n          ...instrumentations,\n        ],\n      });\n    } else {\n      registerInstrumentations({\n        instrumentations: [\n          setupDefaultInstrumentations(defaultInstrumentationConfig, {\n            embraceSpanProcessor,\n          }),\n          ...instrumentations,\n        ],\n      });\n    }\n\n    diagLogger.info('successfully initialized the SDK');\n\n    const sdkControl: SDKControl = {\n      setDynamicConfig: (config: Partial<DynamicSDKConfig>) => {\n        dynamicConfigManager.setConfig(config);\n      },\n      flush: async () => {\n        await tracerProvider.forceFlush();\n        await loggerProvider.forceFlush();\n      },\n      log: embraceLogManager,\n      trace: embraceTraceManager,\n      session: spanSessionManager,\n      user: userManager,\n    };\n\n    if (registerGlobally) {\n      registry.register(sdkControl);\n    }\n\n    spanSessionManager.recordSDKStartupDuration(\n      perf.getNowMillis() - initSDKStart\n    );\n\n    return sdkControl;\n  } catch (e) {\n    const message = e instanceof Error ? e.message : 'Unknown error.';\n    diagLogger.error(`failed to initialize the SDK: ${message}`);\n    return false;\n  }\n};\n\nconst setupUser = ({ registerGlobally }: SetupUserArgs) => {\n  const embraceUserManager = new EmbraceUserManager();\n\n  if (registerGlobally) {\n    user.setGlobalUserManager(embraceUserManager);\n  }\n\n  return embraceUserManager;\n};\n\nconst setupSession = ({ limitManager, registerGlobally }: SetupSessionArgs) => {\n  const embraceSpanSessionManager = new EmbraceSpanSessionManager({\n    limitManager,\n  });\n\n  if (registerGlobally) {\n    session.setGlobalSessionManager(embraceSpanSessionManager);\n  }\n\n  return embraceSpanSessionManager;\n};\n\nconst setupTraces = ({\n  resource,\n  spanSessionManager,\n  userManager,\n  spanExporters,\n  spanProcessors = [],\n  propagator = null,\n  contextManager = null,\n  attributeScrubbers,\n  registerGlobally,\n  embraceSpanProcessor,\n}: SetupTracesArgs) => {\n  const finalSpanProcessors: SpanProcessor[] = [\n    ...spanProcessors,\n    createSessionSpanProcessor(spanSessionManager),\n    new EmbraceNetworkSpanProcessor(),\n    new UserSpanProcessor({ userManager }),\n    new SpanScrubProcessor({ attributeScrubbers }),\n  ];\n\n  spanExporters?.forEach(exporter => {\n    finalSpanProcessors.push(new BatchSpanProcessor(exporter));\n  });\n\n  if (embraceSpanProcessor) {\n    finalSpanProcessors.push(embraceSpanProcessor);\n  }\n\n  const tracerProvider = new WebTracerProvider({\n    resource,\n    spanProcessors: finalSpanProcessors,\n    spanLimits: {\n      // Session properties are stored as attributes on the session span, add a\n      // buffer here so that there is room for our internal attributes\n      attributeCountLimit: DEFAULT_LIMITS.maxAllowed.session_property * 2,\n      attributePerEventCountLimit: 20,\n      // Breadcrumbs are stored as events on the session span, add a\n      // buffer here so that there is room for our internal events\n      eventCountLimit: DEFAULT_LIMITS.maxAllowed.breadcrumb * 2,\n      attributeValueLengthLimit: 1024,\n    },\n  });\n\n  const embraceTraceManager = new EmbraceTraceManager({\n    tracerProvider: registerGlobally ? undefined : tracerProvider,\n  });\n\n  if (registerGlobally) {\n    trace.setGlobalTraceManager(embraceTraceManager);\n    tracerProvider.register({\n      // WebTracerProvider.register has different fallback behaviours depending on whether null or undefined is passed,\n      // be more explicit here and always supply a StackContextManager if the config did not specify one. If a user really\n      // wants to turn off context management they can pass a no-op manager explicitly:\n      // https://github.com/open-telemetry/opentelemetry-js/blob/4f0b6285af24b71a9fa022755aaa3b6a63ae5033/packages/opentelemetry-sdk-trace-web/src/WebTracerProvider.ts#L39\n      contextManager: contextManager || new StackContextManager(),\n      propagator,\n    });\n  }\n\n  return { tracerProvider, embraceTraceManager };\n};\n\nconst setupLogs = ({\n  resource,\n  userManager,\n  logExporters,\n  logProcessors,\n  spanSessionManager,\n  limitManager,\n  attributeScrubbers,\n  registerGlobally,\n  embraceLogProcessor,\n}: SetupLogsArgs) => {\n  const finalLogProcessors: LogRecordProcessor[] = [\n    ...logProcessors,\n    new IdentifiableSessionLogRecordProcessor({\n      spanSessionManager,\n    }),\n    new EmbraceLogRecordProcessor(),\n    new UserLogRecordProcessor({ userManager }),\n    new LogRecordScrubProcessor({ attributeScrubbers }),\n  ];\n\n  logExporters?.forEach(exporter => {\n    finalLogProcessors.push(new BatchLogRecordProcessor(exporter));\n  });\n\n  if (embraceLogProcessor) {\n    finalLogProcessors.push(embraceLogProcessor);\n  }\n\n  const loggerProvider = new LoggerProvider({\n    resource,\n    processors: finalLogProcessors,\n  });\n\n  const embraceLogManager = new EmbraceLogManager({\n    spanSessionManager,\n    limitManager,\n    loggerProvider: registerGlobally ? undefined : loggerProvider,\n  });\n\n  if (registerGlobally) {\n    logs.setGlobalLoggerProvider(loggerProvider);\n    log.setGlobalLogManager(embraceLogManager);\n  }\n\n  return { loggerProvider, embraceLogManager };\n};\n"],"names":["initSDK","appID","appVersion","resource","emptyResource","spanExporters","logExporters","spanProcessors","propagator","defaultInstrumentationConfig","instrumentations","contextManager","logProcessors","attributeScrubbers","enableDefaultAttributeScrubbing","additionalQueryParamsToScrub","logLevel","DiagLogLevel","ERROR","embraceDataURL","embraceConfigURL","diagLogger","diag","createComponentLogger","namespace","dynamicSDKConfigManager","providedDynamicSDKConfigManager","dynamicSDKConfig","registerGlobally","blockNetworkSpanForwarding","perf","OTelPerformanceManager","initSDKStart","getNowMillis","existingSDK","registry","registered","warn","setLogger","DiagConsoleLogger","resourceWithWebSDKAttributes","merge","getWebSDKResource","pageSessionStorage","window","sessionStorage","sendingToEmbrace","isValidAppID","length","Error","userManager","setupUser","enduserPseudoID","getEmbraceUserId","dynamicConfigManager","EmbraceDynamicConfigManager","defaultConfig","deviceId","refreshRemoteConfig","sdkFeaturesManager","EmbraceSDKFeaturesManager","isSDKEnabled","debug","nsfValid","nsfConfigValidation","featureManager","limitManager","EmbraceLimitManager","DEFAULT_LIMITS","finalAttributeScrubbers","getDefaultAttributeScrubbers","spanSessionManager","setupSession","embraceSpanProcessor","embraceLogProcessor","EmbraceSessionBatchedSpanProcessor","exporter","EmbraceTraceExporter","userID","storedSpansExpireTimeoutMS","BatchLogRecordProcessor","EmbraceLogExporter","tracerProvider","embraceTraceManager","setupTraces","EmbraceW3CTraceContextPropagator","setTracerProvider","loggerProvider","embraceLogManager","setupLogs","registerInstrumentations","setupDefaultInstrumentations","logManager","info","sdkControl","setDynamicConfig","config","setConfig","flush","forceFlush","log","trace","session","user","register","recordSDKStartupDuration","e","message","error","embraceUserManager","EmbraceUserManager","setGlobalUserManager","embraceSpanSessionManager","EmbraceSpanSessionManager","setGlobalSessionManager","finalSpanProcessors","createSessionSpanProcessor","EmbraceNetworkSpanProcessor","UserSpanProcessor","SpanScrubProcessor","forEach","push","BatchSpanProcessor","WebTracerProvider","spanLimits","attributeCountLimit","maxAllowed","session_property","attributePerEventCountLimit","eventCountLimit","breadcrumb","attributeValueLengthLimit","EmbraceTraceManager","undefined","setGlobalTraceManager","StackContextManager","finalLogProcessors","IdentifiableSessionLogRecordProcessor","EmbraceLogRecordProcessor","UserLogRecordProcessor","LogRecordScrubProcessor","LoggerProvider","processors","EmbraceLogManager","logs","setGlobalLoggerProvider","setGlobalLogManager"],"mappings":"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"}