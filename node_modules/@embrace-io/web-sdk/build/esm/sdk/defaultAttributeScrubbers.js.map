{"version":3,"file":"defaultAttributeScrubbers.js","sources":["../../../src/sdk/defaultAttributeScrubbers.ts"],"sourcesContent":["import type { AttributeScrubber } from '../common/index.js';\nimport {\n  ATTR_URL_FULL,\n  ATTR_URL_PATH,\n  ATTR_URL_QUERY,\n  SEMATTRS_HTTP_URL,\n} from '@opentelemetry/semantic-conventions';\n\nconst HOST_CREDENTIALS_REGEX = /\\/\\/(.+):(.+)@(.+)\\//;\n\n// https://github.com/open-telemetry/semantic-conventions/blob/3b64cb31022feaacb410bfd6e571c1f19b5fbce0/docs/registry/attributes/url.md?plain=1#L41\nconst DEFAULT_SENSITIVE_TOKENS = [\n  'AWSAccessKeyId',\n  'Signature',\n  'sig',\n  '`X-Goog-Signature',\n  'password',\n  'auth',\n  'pw',\n  'token',\n];\n\ntype scrubArgs = {\n  value: string;\n  queryParamRegex: RegExp;\n  scrubPath: boolean;\n  scrubQuery: boolean;\n};\n\nconst scrubURL = ({\n  value,\n  queryParamRegex,\n  scrubPath,\n  scrubQuery,\n}: scrubArgs) => {\n  let scrubbed = value;\n\n  if (scrubPath) {\n    // scrub credentials passed via URL in form of `https://username:password@www.example.com/`\n    scrubbed = scrubbed.replace(\n      HOST_CREDENTIALS_REGEX,\n      '//REDACTED:REDACTED@$3/'\n    );\n  }\n\n  if (scrubQuery) {\n    // scrub query string parameters of the form \"key=sensitiveValue\"\n    scrubbed = scrubbed.replaceAll(queryParamRegex, '$1$2=REDACTED');\n  }\n\n  return scrubbed;\n};\n\nexport const getDefaultAttributeScrubbers = (\n  additionalSensitiveQueryTokens?: string[]\n): AttributeScrubber[] => {\n  const sensitiveQueryTokens = [\n    ...DEFAULT_SENSITIVE_TOKENS,\n    ...(additionalSensitiveQueryTokens || []),\n  ];\n\n  const queryParamRegex = new RegExp(\n    `(^|&|\\\\?)(${sensitiveQueryTokens.join('|')})=[^&]+`,\n    'g'\n  );\n\n  return [\n    {\n      // https://github.com/open-telemetry/semantic-conventions/blob/3b64cb31022feaacb410bfd6e571c1f19b5fbce0/docs/registry/attributes/url.md?plain=1#L30\n      key: ATTR_URL_FULL,\n      scrub: (value: string) =>\n        scrubURL({ value, queryParamRegex, scrubPath: true, scrubQuery: true }),\n    },\n    {\n      // Adding to catch the deprecated attribute that was replaced by ATTR_URL_FULL\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      key: SEMATTRS_HTTP_URL,\n      scrub: (value: string) =>\n        scrubURL({ value, queryParamRegex, scrubPath: true, scrubQuery: true }),\n    },\n    {\n      // https://github.com/open-telemetry/semantic-conventions/blob/3b64cb31022feaacb410bfd6e571c1f19b5fbce0/docs/registry/attributes/url.md?plain=1#L57\n      key: ATTR_URL_PATH,\n      scrub: (value: string) =>\n        scrubURL({\n          value,\n          queryParamRegex,\n          scrubPath: true,\n          scrubQuery: false,\n        }),\n    },\n    {\n      // https://github.com/open-telemetry/semantic-conventions/blob/3b64cb31022feaacb410bfd6e571c1f19b5fbce0/docs/registry/attributes/url.md?plain=1#L59\n      key: ATTR_URL_QUERY,\n      scrub: (value: string) =>\n        scrubURL({\n          value,\n          queryParamRegex,\n          scrubPath: false,\n          scrubQuery: true,\n        }),\n    },\n\n    // NOTE that url.original could contain sensitive information however this is intentionally not scrubbed as per the\n    // semantic convention:\n    // https://github.com/open-telemetry/semantic-conventions/blob/3b64cb31022feaacb410bfd6e571c1f19b5fbce0/docs/registry/attributes/url.md?plain=1#L54\n  ];\n};\n"],"names":["HOST_CREDENTIALS_REGEX","DEFAULT_SENSITIVE_TOKENS","scrubURL","value","queryParamRegex","scrubPath","scrubQuery","scrubbed","replace","replaceAll","getDefaultAttributeScrubbers","additionalSensitiveQueryTokens","sensitiveQueryTokens","RegExp","join","key","ATTR_URL_FULL","scrub","SEMATTRS_HTTP_URL","ATTR_URL_PATH","ATTR_URL_QUERY"],"mappings":";;AAQA,MAAMA,sBAAAA,GAAyB,sBAAA;AAE/B;AACA,MAAMC,wBAAAA,GAA2B;AAC/B,IAAA,gBAAA;AACA,IAAA,WAAA;AACA,IAAA,KAAA;AACA,IAAA,mBAAA;AACA,IAAA,UAAA;AACA,IAAA,MAAA;AACA,IAAA,IAAA;AACA,IAAA;AACD,CAAA;AASD,MAAMC,QAAAA,GAAW,CAAC,EAChBC,KAAK,EACLC,eAAe,EACfC,SAAS,EACTC,UAAU,EACA,GAAA;AACV,IAAA,IAAIC,QAAAA,GAAWJ,KAAAA;AAEf,IAAA,IAAIE,SAAAA,EAAW;;QAEbE,QAAAA,GAAWA,QAAAA,CAASC,OAAO,CACzBR,sBAAAA,EACA,yBAAA,CAAA;AAEJ,IAAA;AAEA,IAAA,IAAIM,UAAAA,EAAY;;QAEdC,QAAAA,GAAWA,QAAAA,CAASE,UAAU,CAACL,eAAAA,EAAiB,eAAA,CAAA;AAClD,IAAA;IAEA,OAAOG,QAAAA;AACT,CAAA;AAEO,MAAMG,+BAA+B,CAC1CC,8BAAAA,GAAAA;AAEA,IAAA,MAAMC,oBAAAA,GAAuB;AACxBX,QAAAA,GAAAA,wBAAAA;AACCU,QAAAA,GAAAA,8BAAAA,IAAkC;AACvC,KAAA;AAED,IAAA,MAAMP,eAAAA,GAAkB,IAAIS,MAAAA,CAC1B,CAAC,UAAU,EAAED,oBAAAA,CAAqBE,IAAI,CAAC,GAAA,CAAA,CAAK,OAAO,CAAC,EACpD,GAAA,CAAA;IAGF,OAAO;AACL,QAAA;;YAEEC,GAAAA,EAAKC,aAAAA;YACLC,KAAAA,EAAO,CAACd,QACND,QAAAA,CAAS;AAAEC,oBAAAA,KAAAA;AAAOC,oBAAAA,eAAAA;oBAAiBC,SAAAA,EAAW,IAAA;oBAAMC,UAAAA,EAAY;AAAK,iBAAA;AACzE,SAAA;AACA,QAAA;;;YAGES,GAAAA,EAAKG,iBAAAA;YACLD,KAAAA,EAAO,CAACd,QACND,QAAAA,CAAS;AAAEC,oBAAAA,KAAAA;AAAOC,oBAAAA,eAAAA;oBAAiBC,SAAAA,EAAW,IAAA;oBAAMC,UAAAA,EAAY;AAAK,iBAAA;AACzE,SAAA;AACA,QAAA;;YAEES,GAAAA,EAAKI,aAAAA;YACLF,KAAAA,EAAO,CAACd,QACND,QAAAA,CAAS;AACPC,oBAAAA,KAAAA;AACAC,oBAAAA,eAAAA;oBACAC,SAAAA,EAAW,IAAA;oBACXC,UAAAA,EAAY;AACd,iBAAA;AACJ,SAAA;AACA,QAAA;;YAEES,GAAAA,EAAKK,cAAAA;YACLH,KAAAA,EAAO,CAACd,QACND,QAAAA,CAAS;AACPC,oBAAAA,KAAAA;AACAC,oBAAAA,eAAAA;oBACAC,SAAAA,EAAW,KAAA;oBACXC,UAAAA,EAAY;AACd,iBAAA;AACJ;AAKD,KAAA;AACH;;;;"}