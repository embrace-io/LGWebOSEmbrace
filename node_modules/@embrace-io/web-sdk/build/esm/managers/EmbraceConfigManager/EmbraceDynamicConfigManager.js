import { getConfigURL } from './utils.js';
import { diag } from '@opentelemetry/api';
import { DEFAULT_CONFIG, LOCAL_STORAGE_REMOTE_CONFIG_KEY } from './constants.js';

const parseRemoteConfig = (remoteConfig)=>{
    const parsed = {
        samplingPct: remoteConfig.threshold
    };
    if (remoteConfig.network_span_forwarding !== undefined) {
        parsed.networkSpansForwardingThreshold = remoteConfig.network_span_forwarding.pct_enabled;
    }
    return parsed;
};
class EmbraceDynamicConfigManager {
    constructor({ appID, appVersion, deviceId, diag: diagParam = diag.createComponentLogger({
        namespace: 'embrace-config-manager'
    }), storage = localStorage, // Allow users to provide a default config
    defaultConfig = {}, embraceConfigURL } = {}){
        // Set to null if appID is not provided, in that case only rely on local config
        this._remoteConfigURL = null;
        this._etag = null;
        if (appID && appVersion && deviceId) {
            this._remoteConfigURL = getConfigURL(appID, {
                appVersion,
                deviceId,
                // TODO: Replace with actual OS version once we start capturing it
                osVersion: '1'
            }, embraceConfigURL);
        }
        this._diag = diagParam;
        this._storage = storage;
        const storedRemoteConfig = this._getRemoteConfigFromStorage();
        if (storedRemoteConfig) {
            this._etag = storedRemoteConfig.etag;
        }
        this._sdkConfig = {
            // Merge the default config with any user-provided defaults
            // making sure user-provided values take precedence
            ...DEFAULT_CONFIG,
            ...defaultConfig,
            // Stored remote config values will override both defaults and user-provided defaults
            ...storedRemoteConfig ? parseRemoteConfig(storedRemoteConfig.config) : {}
        };
    }
    setConfig(config) {
        this._sdkConfig = {
            ...this._sdkConfig,
            ...config
        };
    }
    getConfig() {
        return this._sdkConfig;
    }
    // No-op if not sending data to embrace
    async refreshRemoteConfig() {
        if (!this._remoteConfigURL) {
            return;
        }
        try {
            const remoteConfigResponse = await this._fetchRemoteConfig(this._remoteConfigURL);
            if (!remoteConfigResponse) {
                this._diag.debug('No changes in remote config, skipping update');
                return;
            }
            const [remoteConfig, etag] = remoteConfigResponse;
            this._storage.setItem(LOCAL_STORAGE_REMOTE_CONFIG_KEY, JSON.stringify({
                config: remoteConfig,
                etag
            }));
            this._sdkConfig = parseRemoteConfig(remoteConfig);
            this._etag = etag;
        } catch (error) {
            this._diag.warn(`Failed to refresh remote config: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    _getRemoteConfigFromStorage() {
        try {
            const configString = this._storage.getItem(LOCAL_STORAGE_REMOTE_CONFIG_KEY);
            if (configString) {
                return JSON.parse(configString);
            }
            return null;
        } catch (error) {
            this._diag.warn(`Failed to parse remote config from storage: ${error instanceof Error ? error.message : String(error)}`);
            return null;
        }
    }
    async _fetchRemoteConfig(url) {
        const response = await fetch(url, {
            headers: this._etag ? {
                'If-None-Match': this._etag
            } : {}
        });
        const etag = response.headers.get('etag');
        // Nothing changed, return null
        if (response.status === 304) {
            return null;
        }
        if (!response.ok) {
            this._diag.warn(`Failed to fetch remote config from ${url}: ${response.statusText}`);
            return null;
        }
        const remoteConfig = await response.json();
        return [
            remoteConfig,
            etag
        ];
    }
}

export { EmbraceDynamicConfigManager };
//# sourceMappingURL=EmbraceDynamicConfigManager.js.map
