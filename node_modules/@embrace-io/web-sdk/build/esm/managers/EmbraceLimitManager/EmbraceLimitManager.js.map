{"version":3,"file":"EmbraceLimitManager.js","sources":["../../../../src/managers/EmbraceLimitManager/EmbraceLimitManager.ts"],"sourcesContent":["import type { AttributeValue, DiagLogger } from '@opentelemetry/api';\nimport { diag } from '@opentelemetry/api';\n\nimport type {\n  AttributeLimitedType,\n  EmbraceLimitManagerArgs,\n  LengthLimitedType,\n  LimitedBreadcrumb,\n  LimitedException,\n  LimitedLog,\n  LimitedSessionProperty,\n  LimitedType,\n  LimitManagerInternal,\n  LimitOperation,\n  LogLimitedType,\n  MaxLimitedType,\n} from './types.js';\nimport type { LogSeverity } from '../../api-logs/index.js';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-web';\nimport { EMB_TYPES, KEY_EMB_TYPE } from '../../constants/index.js';\n\nconst LogSeverityToLimitType: Record<LogSeverity, LogLimitedType> = {\n  info: 'info_log',\n  warning: 'warning_log',\n  error: 'error_log',\n};\n\nexport class EmbraceLimitManager implements LimitManagerInternal {\n  private readonly _diag: DiagLogger;\n\n  private _diagnosticCounts: Record<string, number> = {};\n  private _currentCount: Record<MaxLimitedType, number> = {\n    exception: 0,\n    error_log: 0,\n    warning_log: 0,\n    info_log: 0,\n    breadcrumb: 0,\n    session_property: 0,\n    span: 0,\n    network_request: 0,\n  };\n  private readonly _maxAllowed: Record<MaxLimitedType, number>;\n  private readonly _maxLength: Record<LengthLimitedType, number>;\n  private readonly _maxAttributes: Record<AttributeLimitedType, number>;\n\n  public constructor({\n    diag: diagParam,\n    maxAllowed,\n    maxLength,\n    maxAttributes,\n  }: EmbraceLimitManagerArgs) {\n    this._diag =\n      diagParam ??\n      diag.createComponentLogger({\n        namespace: 'EmbraceLimitManager',\n      });\n\n    this._maxAllowed = maxAllowed;\n    this._maxLength = maxLength;\n    this._maxAttributes = maxAttributes;\n  }\n\n  private _dropIfMaxReached(type: MaxLimitedType): boolean {\n    if (this._currentCount[type] >= this._maxAllowed[type]) {\n      this._diag.warn(\n        `disallowing ${type} because the maximum number of ${this._maxAllowed[type].toString()} has already been reached for this session`\n      );\n\n      this._incrDiagnosticCount(type, 'drop');\n      return true;\n    }\n\n    this._currentCount[type] = (this._currentCount[type] || 0) + 1;\n    return false;\n  }\n\n  public truncateString(type: LengthLimitedType, body: string) {\n    if (body.length > this._maxLength[type]) {\n      this._diag.warn(\n        `truncating ${type} because it is longer than ${this._maxLength[type].toString()} characters: \"${body}\"`\n      );\n\n      this._incrDiagnosticCount(type, 'truncate_string');\n      return body.substring(0, this._maxLength[type]);\n    }\n\n    return body;\n  }\n\n  private _truncateAttributes(\n    type: AttributeLimitedType,\n    attributes: Record<string, AttributeValue | undefined>,\n    keyType: LengthLimitedType,\n    valueType: LengthLimitedType\n  ) {\n    const keys = Object.keys(attributes);\n\n    if (keys.length > this._maxAttributes[type]) {\n      this._diag.warn(\n        `truncating ${type} attributes because there are more than ${this._maxAttributes[type].toString()} set`\n      );\n      this._incrDiagnosticCount(type, 'truncate_attributes');\n    }\n\n    const truncatedAttributes: Record<string, AttributeValue | undefined> = {};\n\n    for (let i = 0; i < Math.min(keys.length, this._maxAttributes[type]); i++) {\n      const truncatedKey = this.truncateString(keyType, keys[i]);\n      truncatedAttributes[truncatedKey] = this.truncateString(\n        valueType,\n        attributes[keys[i]]?.toString() || ''\n      );\n    }\n\n    return truncatedAttributes;\n  }\n\n  public limitBreadcrumb(name: string): LimitedBreadcrumb | 'dropped' {\n    if (this._dropIfMaxReached('breadcrumb')) {\n      return 'dropped';\n    }\n\n    return {\n      name: this.truncateString('breadcrumb', name),\n    };\n  }\n\n  public limitException(\n    message: string,\n    attributes: Record<string, AttributeValue | undefined>\n  ): LimitedException | 'dropped' {\n    if (this._dropIfMaxReached('exception')) {\n      return 'dropped';\n    }\n\n    return {\n      message: this.truncateString('exception', message),\n      attributes: this._truncateAttributes(\n        'exception',\n        attributes,\n        'exception_attribute_key',\n        'exception_attribute_value'\n      ),\n    };\n  }\n\n  public limitLog(\n    message: string,\n    severity: LogSeverity,\n    attributes: Record<string, AttributeValue | undefined>\n  ): LimitedLog | 'dropped' {\n    const logType = LogSeverityToLimitType[severity];\n\n    if (this._dropIfMaxReached(logType)) {\n      return 'dropped';\n    }\n\n    return {\n      message: this.truncateString(logType, message),\n      attributes: this._truncateAttributes(\n        logType,\n        attributes,\n        'log_attribute_key',\n        'log_attribute_value'\n      ),\n    };\n  }\n\n  public limitSessionProperty(\n    key: string,\n    value: string\n  ): LimitedSessionProperty | 'dropped' {\n    if (this._dropIfMaxReached('session_property')) {\n      return 'dropped';\n    }\n\n    return {\n      key: this.truncateString('session_property_key', key),\n      value: this.truncateString('session_property_value', value),\n    };\n  }\n\n  public dropReadableSpan(span: ReadableSpan): boolean {\n    const type =\n      span.attributes[KEY_EMB_TYPE] === EMB_TYPES.Network\n        ? 'network_request'\n        : 'span';\n\n    return this._dropIfMaxReached(type);\n  }\n\n  public reset(): void {\n    this._diagnosticCounts = {};\n    this._currentCount = {\n      exception: 0,\n      error_log: 0,\n      warning_log: 0,\n      info_log: 0,\n      breadcrumb: 0,\n      session_property: 0,\n      span: 0,\n      network_request: 0,\n    };\n  }\n\n  private _incrDiagnosticCount(type: LimitedType, operation: LimitOperation) {\n    const key = `emb.app.applied_limit.${type}.${operation}.count`;\n\n    this._diagnosticCounts[key] = (this._diagnosticCounts[key] || 0) + 1;\n  }\n  public getDiagnosticCounts(): Record<string, number> {\n    return this._diagnosticCounts;\n  }\n}\n"],"names":["LogSeverityToLimitType","info","warning","error","EmbraceLimitManager","diag","diagParam","maxAllowed","maxLength","maxAttributes","_diagnosticCounts","_currentCount","exception","error_log","warning_log","info_log","breadcrumb","session_property","span","network_request","_diag","createComponentLogger","namespace","_maxAllowed","_maxLength","_maxAttributes","_dropIfMaxReached","type","warn","toString","_incrDiagnosticCount","truncateString","body","length","substring","_truncateAttributes","attributes","keyType","valueType","keys","Object","truncatedAttributes","i","Math","min","truncatedKey","limitBreadcrumb","name","limitException","message","limitLog","severity","logType","limitSessionProperty","key","value","dropReadableSpan","KEY_EMB_TYPE","EMB_TYPES","Network","reset","operation","getDiagnosticCounts"],"mappings":"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"}