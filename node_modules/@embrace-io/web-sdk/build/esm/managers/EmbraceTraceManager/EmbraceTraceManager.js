import { trace, context } from '@opentelemetry/api';
import { EmbraceExtendedSpan } from './EmbraceExtendedSpan.js';
import { EMB_TYPES, KEY_EMB_TYPE } from '../../constants/attributes.js';

class EmbraceTraceManager {
    constructor({ tracerProvider: globalTraceProviderOverride } = {}){
        this.setSpan = trace.setSpan;
        const tracerProvider = globalTraceProviderOverride ?? trace;
        this._tracer = tracerProvider.getTracer('embrace-web-sdk-traces');
    }
    startSpan(name, options = {}, ctx) {
        options.attributes = options.attributes ? options.attributes : {};
        options.attributes[KEY_EMB_TYPE] = EMB_TYPES.Perf;
        const activeContext = options.parentSpan ? trace.setSpan(context.active(), options.parentSpan) : ctx;
        return new EmbraceExtendedSpan(this._tracer.startSpan(name, options, activeContext));
    }
    getSpan(context) {
        const span = trace.getSpan(context);
        if (span) {
            return new EmbraceExtendedSpan(span);
        }
        return undefined;
    }
}

export { EmbraceTraceManager };
//# sourceMappingURL=EmbraceTraceManager.js.map
