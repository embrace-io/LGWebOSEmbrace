{"version":3,"file":"EmbraceLogManager.js","sources":["../../../../src/managers/EmbraceLogManager/EmbraceLogManager.ts"],"sourcesContent":["import type { AttributeValue, DiagLogger } from '@opentelemetry/api';\nimport { diag } from '@opentelemetry/api';\nimport type { Logger } from '@opentelemetry/api-logs';\nimport { logs, SeverityNumber } from '@opentelemetry/api-logs';\nimport {\n  ATTR_EXCEPTION_MESSAGE,\n  ATTR_EXCEPTION_STACKTRACE,\n  ATTR_EXCEPTION_TYPE,\n} from '@opentelemetry/semantic-conventions';\nimport type { LogManager, LogSeverity } from '../../api-logs/index.js';\nimport {\n  EMB_TYPES,\n  KEY_EMB_EXCEPTION_HANDLING,\n  KEY_EMB_JS_EXCEPTION_STACKTRACE,\n  KEY_EMB_TYPE,\n} from '../../constants/index.js';\nimport type { PerformanceManager } from '../../utils/index.js';\nimport { GLOBAL_CONFIG, OTelPerformanceManager } from '../../utils/index.js';\nimport type { EmbraceLogManagerArgs } from './types.js';\nimport type {\n  LogExceptionOptions,\n  LogMessageOptions,\n} from '../../api-logs/manager/index.js';\nimport type { SpanSessionManagerInternal } from '../EmbraceSpanSessionManager/index.js';\nimport {\n  KEY_EMB_ERROR_LOG_COUNT,\n  KEY_EMB_JS_FILE_BUNDLE_IDS,\n  KEY_EMB_UNHANDLED_EXCEPTIONS_COUNT,\n} from '../../constants/attributes.js';\nimport type { LimitManagerInternal } from '../EmbraceLimitManager/index.js';\n\n/**\n * GLOBAL_CONFIG._EmbraceFileBundleIDs is populated on run time when each file is loaded,\n * based on the contents that were injected by the embrace-web-cli.\n */\nconst getJSFileBundleIDs = () =>\n  JSON.stringify(GLOBAL_CONFIG._EmbraceFileBundleIDs || {});\n\nexport class EmbraceLogManager implements LogManager {\n  private readonly _diag: DiagLogger;\n  private readonly _perf: PerformanceManager;\n  private readonly _logger: Logger;\n  private readonly _spanSessionManager: SpanSessionManagerInternal;\n  private readonly _limitManager: LimitManagerInternal;\n\n  public constructor({\n    diag: diagParam,\n    perf,\n    spanSessionManager,\n    limitManager,\n    loggerProvider: globalLoggerProviderOverride,\n  }: EmbraceLogManagerArgs) {\n    const loggerProvider = globalLoggerProviderOverride ?? logs;\n\n    this._diag =\n      diagParam ??\n      diag.createComponentLogger({\n        namespace: 'EmbraceLogManager',\n      });\n    this._perf = perf ?? new OTelPerformanceManager();\n    this._logger = loggerProvider.getLogger('embrace-web-sdk-logs');\n    this._spanSessionManager = spanSessionManager;\n    this._limitManager = limitManager;\n  }\n\n  private static _logSeverityToSeverityNumber(\n    severity: LogSeverity\n  ): SeverityNumber {\n    switch (severity) {\n      case 'info':\n        return SeverityNumber.INFO;\n      case 'warning':\n        return SeverityNumber.WARN;\n      default:\n        return SeverityNumber.ERROR;\n    }\n  }\n\n  public logException(\n    error: unknown,\n    {\n      handled = true,\n      attributes = {},\n      timestamp = this._perf.getNowMillis(),\n    }: LogExceptionOptions = {}\n  ) {\n    if (!error) {\n      error = new Error('logException received an undefined error');\n    }\n\n    // real user input may be null but TS doesn't know that\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (attributes == null || typeof attributes !== 'object') {\n      this._diag.warn('attributes must be a non-null object', attributes);\n      attributes = {};\n    }\n\n    if (!handled) {\n      this._spanSessionManager.incrSessionCountForKey(\n        KEY_EMB_UNHANDLED_EXCEPTIONS_COUNT\n      );\n    }\n\n    const normalizedError = EmbraceLogManager._normalizeErrorData(error);\n\n    const limitedException = this._limitManager.limitException(\n      normalizedError.message,\n      attributes\n    );\n\n    if (limitedException === 'dropped') {\n      return;\n    }\n\n    this._logger.emit({\n      timestamp,\n      severityNumber: SeverityNumber.ERROR,\n      severityText: 'ERROR',\n      body: limitedException.message,\n      attributes: {\n        ...limitedException.attributes,\n        [KEY_EMB_TYPE]: EMB_TYPES.SystemException,\n        [KEY_EMB_EXCEPTION_HANDLING]: handled ? 'HANDLED' : 'UNHANDLED',\n        [ATTR_EXCEPTION_TYPE]: normalizedError.type,\n        ['exception.name']: normalizedError.name,\n        [ATTR_EXCEPTION_MESSAGE]: limitedException.message,\n        [ATTR_EXCEPTION_STACKTRACE]: normalizedError.stack,\n        [KEY_EMB_JS_FILE_BUNDLE_IDS]: getJSFileBundleIDs(),\n      },\n    });\n  }\n\n  public message(\n    message: string,\n    severity: LogSeverity,\n    {\n      attributes = {},\n      includeStacktrace = true,\n      stacktrace,\n    }: LogMessageOptions = {}\n  ) {\n    if (!message || typeof message !== 'string') {\n      this._diag.warn('Message must be a string');\n      return;\n    }\n\n    if (severity === 'error') {\n      this._spanSessionManager.incrSessionCountForKey(KEY_EMB_ERROR_LOG_COUNT);\n    }\n\n    let stacktraceString = '';\n    if (severity !== 'info') {\n      if (stacktrace) {\n        stacktraceString = stacktrace;\n      } else if (includeStacktrace) {\n        stacktraceString = new Error().stack || '';\n      }\n    }\n\n    this._logMessage({\n      message: message.trim(),\n      severity,\n      timestamp: this._perf.getNowMillis(),\n      attributes,\n      stacktrace: stacktraceString,\n    });\n  }\n\n  private _logMessage({\n    message,\n    severity,\n    timestamp,\n    attributes = {},\n    stacktrace,\n  }: {\n    message: string;\n    severity: LogSeverity;\n    timestamp: number;\n    attributes?: Record<string, AttributeValue | undefined>;\n    stacktrace?: string;\n  }) {\n    const limitedLog = this._limitManager.limitLog(\n      message,\n      severity,\n      attributes\n    );\n\n    if (limitedLog === 'dropped') {\n      return;\n    }\n\n    this._logger.emit({\n      timestamp,\n      severityNumber: EmbraceLogManager._logSeverityToSeverityNumber(severity),\n      severityText: severity.toUpperCase(),\n      body: limitedLog.message,\n      attributes: {\n        ...limitedLog.attributes,\n        [KEY_EMB_TYPE]: EMB_TYPES.SystemLog,\n        ...(stacktrace\n          ? {\n              [KEY_EMB_JS_EXCEPTION_STACKTRACE]: stacktrace,\n              [KEY_EMB_JS_FILE_BUNDLE_IDS]: getJSFileBundleIDs(),\n            }\n          : {}),\n      },\n    });\n  }\n\n  private static _normalizeErrorData(error: unknown): {\n    message: string;\n    type: string;\n    name: string;\n    stack: string; // 'stack' not 'stacktrace' here to match the standard Error.stack property name\n  } {\n    if (error instanceof Error) {\n      return {\n        message: typeof error.message === 'string' ? error.message.trim() : '',\n        type: error.constructor.name,\n        name: error.name,\n        stack: error.stack || '',\n      };\n    }\n\n    // For non-Error types, generate a new stack trace\n    const userCallStack = new Error().stack || '';\n\n    if (typeof error === 'string') {\n      return {\n        message: error.trim(),\n        type: 'String',\n        name: 'String',\n        stack: userCallStack,\n      };\n    }\n\n    if (error && typeof error === 'object') {\n      let message = '';\n      try {\n        message = JSON.stringify(error);\n      } catch {\n        message = '[unable to serialize error]';\n      }\n\n      return {\n        message,\n        type: error.constructor.name,\n        name: error.constructor.name,\n        stack: userCallStack,\n      };\n    }\n\n    return {\n      message: String(error).trim(),\n      type: typeof error,\n      name: typeof error,\n      stack: userCallStack,\n    };\n  }\n}\n"],"names":["getJSFileBundleIDs","JSON","stringify","GLOBAL_CONFIG","_EmbraceFileBundleIDs","EmbraceLogManager","diag","diagParam","perf","spanSessionManager","limitManager","loggerProvider","globalLoggerProviderOverride","logs","_diag","createComponentLogger","namespace","_perf","OTelPerformanceManager","_logger","getLogger","_spanSessionManager","_limitManager","_logSeverityToSeverityNumber","severity","SeverityNumber","INFO","WARN","ERROR","logException","error","handled","attributes","timestamp","getNowMillis","Error","warn","incrSessionCountForKey","KEY_EMB_UNHANDLED_EXCEPTIONS_COUNT","normalizedError","_normalizeErrorData","limitedException","limitException","message","emit","severityNumber","severityText","body","KEY_EMB_TYPE","EMB_TYPES","SystemException","KEY_EMB_EXCEPTION_HANDLING","ATTR_EXCEPTION_TYPE","type","name","ATTR_EXCEPTION_MESSAGE","ATTR_EXCEPTION_STACKTRACE","stack","KEY_EMB_JS_FILE_BUNDLE_IDS","includeStacktrace","stacktrace","KEY_EMB_ERROR_LOG_COUNT","stacktraceString","_logMessage","trim","limitedLog","limitLog","toUpperCase","SystemLog","KEY_EMB_JS_EXCEPTION_STACKTRACE","userCallStack","String"],"mappings":"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"}