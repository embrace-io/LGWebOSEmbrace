{"version":3,"file":"EmbraceUserManager.js","sources":["../../../../src/managers/EmbraceUserManager/EmbraceUserManager.ts"],"sourcesContent":["import type { DiagLogger } from '@opentelemetry/api';\nimport { diag } from '@opentelemetry/api';\nimport type { UserManagerInternal } from '../../api-users/index.js';\nimport { KEY_ENDUSER_PSEUDO_ID } from '../../api-users/index.js';\nimport { generateUUID } from '../../utils/index.js';\nimport {\n  EMBRACE_EXTERNAL_USER_ID_KEY,\n  EMBRACE_USER_ID_STORAGE_KEY,\n  EMBRACE_USER_STORAGE_KEY_DEPRECATED,\n} from './constants.js';\nimport type { EmbraceUserManagerArgs } from './types.js';\nimport { isUserId, isUser } from './types.js';\n\nexport class EmbraceUserManager implements UserManagerInternal {\n  private readonly _diag: DiagLogger;\n  private readonly _storage: Storage;\n  private _embraceUserId: string | null = null;\n\n  public constructor({\n    diag: diagParam,\n    storage = localStorage,\n  }: EmbraceUserManagerArgs = {}) {\n    this._diag =\n      diagParam ??\n      diag.createComponentLogger({\n        namespace: 'EmbraceUserManager',\n      });\n    this._storage = storage;\n    this._migrateOldLocalStorageKey();\n    this._initialSetup();\n  }\n\n  // No need to make this API more complicated by returning string | null\n  // embraceUserId should never be null at this point, but just in case defaulting to a new one if is not present\n  public getEmbraceUserId(): string {\n    return this._embraceUserId || this._generateNewEmbraceUserId();\n  }\n\n  public setEmbraceUserId(userId: string) {\n    this._embraceUserId = userId;\n\n    try {\n      this._storage.setItem(EMBRACE_USER_ID_STORAGE_KEY, userId);\n    } catch (e) {\n      this._diag.warn(\n        'Failed to persist user object for storage, keeping it in-memory only',\n        e\n      );\n    }\n  }\n\n  public clearEmbraceUserId() {\n    this._embraceUserId = null;\n\n    try {\n      this._storage.removeItem(EMBRACE_USER_ID_STORAGE_KEY);\n    } catch (e) {\n      this._diag.warn('Failed to remove embrace user in storage', e);\n    }\n  }\n\n  // TODO: remove this by 01/08/2025. Two months should be enough time for users to migrate to the new storage key.\n  private _migrateOldLocalStorageKey() {\n    // Since we migrated from storing a User in localStorage to just the user id,\n    // we need to check if the old storage key exists and migrate it.\n    try {\n      const oldUserStorage = this._storage.getItem(\n        EMBRACE_USER_STORAGE_KEY_DEPRECATED\n      );\n\n      if (oldUserStorage) {\n        const user: unknown = JSON.parse(oldUserStorage);\n        if (isUser(user)) {\n          this._diag.debug('Migrating old user data from storage');\n          this._storage.setItem(\n            EMBRACE_USER_ID_STORAGE_KEY,\n            user[KEY_ENDUSER_PSEUDO_ID]\n          );\n          this._storage.removeItem(EMBRACE_USER_STORAGE_KEY_DEPRECATED);\n        } else {\n          this._diag.warn(\n            'Invalid user data found in storage, clearing old user data'\n          );\n          this._storage.removeItem(EMBRACE_USER_STORAGE_KEY_DEPRECATED);\n        }\n      }\n    } catch (e) {\n      this._diag.warn('Failed to get old user data from storage', e);\n    }\n  }\n\n  private _initialSetup() {\n    try {\n      const embraceUserId = this._storage.getItem(EMBRACE_USER_ID_STORAGE_KEY);\n      if (!embraceUserId) {\n        this._diag.debug(\n          'No existing user found in storage, creating a new one'\n        );\n      } else if (isUserId(embraceUserId)) {\n        this._embraceUserId = embraceUserId;\n      } else {\n        this._diag.warn('Invalid embrace user id, generating a new one');\n        this.clearEmbraceUserId();\n      }\n    } catch (e) {\n      this._diag.warn(\n        'Failed to get embrace user id from storage, defaulting to a new one',\n        e\n      );\n    }\n\n    if (!this._embraceUserId) {\n      this._embraceUserId = this._generateNewEmbraceUserId();\n    }\n  }\n\n  private _generateNewEmbraceUserId() {\n    const newUserId = generateUUID();\n    this.setEmbraceUserId(newUserId);\n\n    return newUserId;\n  }\n\n  // This is the external user id that can be set by the user\n  public getUserId(): string | null {\n    try {\n      return this._storage.getItem(EMBRACE_EXTERNAL_USER_ID_KEY);\n    } catch (e) {\n      this._diag.warn('Failed to retrieve user id from storage', e);\n      return null;\n    }\n  }\n\n  // Use storage as source of truth so multiple tabs can share the same user id\n  public setUserId(userId: string): void {\n    try {\n      this._storage.setItem(EMBRACE_EXTERNAL_USER_ID_KEY, userId);\n    } catch (e) {\n      this._diag.warn('Failed to store user id', e);\n    }\n  }\n\n  public clearUserId(): void {\n    try {\n      this._storage.removeItem(EMBRACE_EXTERNAL_USER_ID_KEY);\n    } catch (e) {\n      this._diag.warn('Failed to clear user id', e);\n    }\n  }\n}\n"],"names":["EmbraceUserManager","diag","diagParam","storage","localStorage","_embraceUserId","_diag","createComponentLogger","namespace","_storage","_migrateOldLocalStorageKey","_initialSetup","getEmbraceUserId","_generateNewEmbraceUserId","setEmbraceUserId","userId","setItem","EMBRACE_USER_ID_STORAGE_KEY","e","warn","clearEmbraceUserId","removeItem","oldUserStorage","getItem","EMBRACE_USER_STORAGE_KEY_DEPRECATED","user","JSON","parse","isUser","debug","KEY_ENDUSER_PSEUDO_ID","embraceUserId","isUserId","newUserId","generateUUID","getUserId","EMBRACE_EXTERNAL_USER_ID_KEY","setUserId","clearUserId"],"mappings":"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"}