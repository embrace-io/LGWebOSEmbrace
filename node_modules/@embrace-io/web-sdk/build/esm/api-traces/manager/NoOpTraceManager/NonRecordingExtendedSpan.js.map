{"version":3,"file":"NonRecordingExtendedSpan.js","sources":["../../../../../src/api-traces/manager/NoOpTraceManager/NonRecordingExtendedSpan.ts"],"sourcesContent":["import type {\n  SpanContext,\n  TimeInput,\n  Link,\n  SpanStatus,\n  Exception,\n  Attributes,\n} from '@opentelemetry/api';\nimport { INVALID_SPAN_CONTEXT } from '@opentelemetry/api';\nimport type {\n  ExtendedSpan,\n  ExtendedSpanFailedOptions,\n} from '../../api/index.js';\n\n// File copied mostly from\n// https://github.com/open-telemetry/opentelemetry-js/blob/7e30af4c15017f48cbdffa054889c62b2006e4ed/api/src/trace/NonRecordingSpan.ts#L31\n// Added ExtendedSpan interface methods\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class NonRecordingExtendedSpan implements ExtendedSpan {\n  private readonly _spanContext: SpanContext;\n\n  public constructor(_spanContext: SpanContext = INVALID_SPAN_CONTEXT) {\n    this._spanContext = _spanContext;\n  }\n\n  public attributes: Attributes = {};\n\n  public fail(_options?: ExtendedSpanFailedOptions) {}\n\n  public spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  public setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  public setAttributes(_attributes: Attributes): this {\n    return this;\n  }\n\n  public removeAttribute(_key: string): this {\n    return this;\n  }\n\n  public addEvent(\n    _name: string,\n    _attributesOrStartTime?: Attributes | TimeInput,\n    _startTime?: TimeInput\n  ): this {\n    return this;\n  }\n\n  public addLink(_link: Link): this {\n    return this;\n  }\n\n  public addLinks(_links: Link[]): this {\n    return this;\n  }\n\n  public setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  public updateName(_name: string): this {\n    return this;\n  }\n\n  public end(_endTime?: TimeInput): void {}\n\n  public isRecording(): boolean {\n    return false;\n  }\n\n  public recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n"],"names":["NonRecordingExtendedSpan","_spanContext","INVALID_SPAN_CONTEXT","attributes","fail","_options","spanContext","setAttribute","_key","_value","setAttributes","_attributes","removeAttribute","addEvent","_name","_attributesOrStartTime","_startTime","addLink","_link","addLinks","_links","setStatus","_status","updateName","end","_endTime","isRecording","recordException","_exception","_time"],"mappings":";;AAcA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcC,IACM,MAAMA,wBAAAA,CAAAA;IAGX,WAAA,CAAmBC,YAAAA,GAA4BC,oBAAoB,CAAE;AAI9DC,QAAAA,IAAAA,CAAAA,UAAAA,GAAyB,EAAC;QAH/B,IAAI,CAACF,YAAY,GAAGA,YAAAA;AACtB,IAAA;IAIOG,IAAAA,CAAKC,QAAoC,EAAE,CAAC;IAE5CC,WAAAA,GAA2B;QAChC,OAAO,IAAI,CAACL,YAAY;AAC1B,IAAA;IAEOM,YAAAA,CAAaC,IAAY,EAAEC,MAAe,EAAQ;AACvD,QAAA,OAAO,IAAI;AACb,IAAA;AAEOC,IAAAA,aAAAA,CAAcC,WAAuB,EAAQ;AAClD,QAAA,OAAO,IAAI;AACb,IAAA;AAEOC,IAAAA,eAAAA,CAAgBJ,IAAY,EAAQ;AACzC,QAAA,OAAO,IAAI;AACb,IAAA;AAEOK,IAAAA,QAAAA,CACLC,KAAa,EACbC,sBAA+C,EAC/CC,UAAsB,EAChB;AACN,QAAA,OAAO,IAAI;AACb,IAAA;AAEOC,IAAAA,OAAAA,CAAQC,KAAW,EAAQ;AAChC,QAAA,OAAO,IAAI;AACb,IAAA;AAEOC,IAAAA,QAAAA,CAASC,MAAc,EAAQ;AACpC,QAAA,OAAO,IAAI;AACb,IAAA;AAEOC,IAAAA,SAAAA,CAAUC,OAAmB,EAAQ;AAC1C,QAAA,OAAO,IAAI;AACb,IAAA;AAEOC,IAAAA,UAAAA,CAAWT,KAAa,EAAQ;AACrC,QAAA,OAAO,IAAI;AACb,IAAA;IAEOU,GAAAA,CAAIC,QAAoB,EAAQ,CAAC;IAEjCC,WAAAA,GAAuB;QAC5B,OAAO,KAAA;AACT,IAAA;AAEOC,IAAAA,eAAAA,CAAgBC,UAAqB,EAAEC,KAAiB,EAAQ,CAAC;AAC1E;;;;"}