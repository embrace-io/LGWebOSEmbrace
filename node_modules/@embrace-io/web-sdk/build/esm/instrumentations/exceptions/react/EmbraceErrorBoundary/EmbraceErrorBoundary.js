import * as React from 'react';
import { log } from '../../../../api-logs/logAPI.js';
import { EMB_ERROR_INSTRUMENTATIONS, KEY_EMB_INSTRUMENTATION } from '../../../../constants/attributes.js';

class EmbraceErrorBoundary extends React.Component {
    constructor(props){
        super(props);
        this._logManager = log.getLogManager();
        this.state = {
            hasError: false
        };
    }
    static getDerivedStateFromError() {
        return {
            hasError: true
        };
    }
    componentDidCatch(error, errorInfo) {
        this._logManager.logException(error, {
            handled: false,
            attributes: {
                'react.component_stack': errorInfo.componentStack ?? undefined,
                [KEY_EMB_INSTRUMENTATION]: EMB_ERROR_INSTRUMENTATIONS.ReactErrorBoundary
            }
        });
    }
    render() {
        if (this.state.hasError) {
            return this.props.fallback();
        }
        return this.props.children;
    }
}

export { EmbraceErrorBoundary };
//# sourceMappingURL=EmbraceErrorBoundary.js.map
