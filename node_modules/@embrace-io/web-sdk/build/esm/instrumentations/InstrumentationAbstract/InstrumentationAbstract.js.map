{"version":3,"file":"InstrumentationAbstract.js","sources":["../../../../src/instrumentations/InstrumentationAbstract/InstrumentationAbstract.ts"],"sourcesContent":["import type {\n  DiagLogger,\n  Meter,\n  MeterProvider,\n  Span,\n  Tracer,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport { diag, metrics, trace } from '@opentelemetry/api';\nimport type { Logger } from '@opentelemetry/api-logs';\nimport { logs } from '@opentelemetry/api-logs';\nimport type {\n  Instrumentation,\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n  SpanCustomizationHook,\n} from '@opentelemetry/instrumentation';\nimport type { LoggerProvider } from '@opentelemetry/sdk-logs';\n\n// copied directly from https://github.com/open-telemetry/opentelemetry-js/blob/90afa2850c0690f7a18ecc511c04927a3183490b/experimental/packages/opentelemetry-instrumentation/src/instrumentation.ts\n// to avoid importing internal and experimental code. Some unused blocks removed.\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport abstract class InstrumentationAbstract<\n  ConfigType extends InstrumentationConfig = InstrumentationConfig,\n> implements Instrumentation<ConfigType>\n{\n  protected _config: ConfigType = {} as ConfigType;\n  protected _diag: DiagLogger;\n\n  public constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    this.setConfig(config);\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  private _tracer: Tracer;\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  private _meter: Meter;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  private _logger: Logger;\n\n  /* Returns logger */\n  protected get logger(): Logger {\n    return this._logger;\n  }\n\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  public getModuleDefinitions(): InstrumentationModuleDefinition[] {\n    // NOTE: disabling typescript check, as this class was copied from OTel repo.\n    // TBH, I agree with typescript here, but keeping it disabled for consistency with the base repo\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n\n    return initResult;\n  }\n\n  /* Disable plugin */\n  public abstract disable(): void;\n\n  /* Enable plugin */\n  public abstract enable(): void;\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): ConfigType {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param config\n   */\n  public setConfig(config: ConfigType): void {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  public setLoggerProvider(loggerProvider: LoggerProvider): void {\n    this._logger = loggerProvider.getLogger(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods.\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    // NOTE: disabling typescript check, as this class was copied from OTel repo.\n    // I agree with typescript here, but keeping it disabled for consistency with the base repo\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n    | void;\n\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  protected _runSpanCustomizationHook<SpanCustomizationInfoType>(\n    hookHandler: SpanCustomizationHook<SpanCustomizationInfoType> | undefined,\n    triggerName: string,\n    span: Span,\n    info: SpanCustomizationInfoType\n  ) {\n    if (!hookHandler) {\n      return;\n    }\n\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\n        `Error running span customization hook due to exception in handler`,\n        { triggerName },\n        e\n      );\n    }\n  }\n}\n"],"names":["InstrumentationAbstract","config","instrumentationName","instrumentationVersion","_config","setConfig","_diag","diag","createComponentLogger","namespace","_tracer","trace","getTracer","_meter","metrics","getMeter","_logger","logs","getLogger","_updateMetricInstruments","tracer","meter","logger","getModuleDefinitions","initResult","init","Array","isArray","getConfig","enabled","setLoggerProvider","loggerProvider","setMeterProvider","meterProvider","setTracerProvider","tracerProvider","_runSpanCustomizationHook","hookHandler","triggerName","span","info","e","error"],"mappings":"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"}