{"version":3,"file":"EmbraceInstrumentationBase.js","sources":["../../../../src/instrumentations/EmbraceInstrumentationBase/EmbraceInstrumentationBase.ts"],"sourcesContent":["import type {\n  Instrumentation,\n  InstrumentationConfig,\n  InstrumentationModuleDefinition,\n} from '@opentelemetry/instrumentation';\nimport type { SpanSessionManager } from '../../api-sessions/index.js';\nimport { session } from '../../api-sessions/index.js';\nimport type { LogManager } from '../../api-logs/index.js';\nimport { log } from '../../api-logs/index.js';\nimport type { PerformanceManager } from '../../utils/index.js';\nimport { OTelPerformanceManager } from '../../utils/index.js';\nimport type { EmbraceInstrumentationBaseArgs } from './types.js';\nimport { InstrumentationAbstract } from '../InstrumentationAbstract/index.js';\n\nexport abstract class EmbraceInstrumentationBase<\n    ConfigType extends InstrumentationConfig = InstrumentationConfig,\n  >\n  extends InstrumentationAbstract<ConfigType>\n  implements Instrumentation<ConfigType>\n{\n  private _sessionManager: SpanSessionManager;\n  private _logManager: LogManager;\n  private readonly _perf: PerformanceManager;\n\n  protected constructor({\n    instrumentationName,\n    instrumentationVersion,\n    config,\n    diag,\n    perf,\n  }: EmbraceInstrumentationBaseArgs<ConfigType>) {\n    super(instrumentationName, instrumentationVersion, config);\n    // optionally override the diag logger from the base class\n    if (diag) {\n      this._diag = diag;\n    }\n    this._perf = perf ?? new OTelPerformanceManager();\n    this._sessionManager = session.getSpanSessionManager();\n    this._logManager = log.getLogManager();\n  }\n\n  /* Returns session provider */\n  protected get sessionManager(): SpanSessionManager {\n    return this._sessionManager;\n  }\n\n  /* Returns log manager */\n  protected get logManager(): LogManager {\n    return this._logManager;\n  }\n\n  /* Returns the performance manager */\n  protected get perf(): PerformanceManager {\n    return this._perf;\n  }\n\n  // no-op\n  protected override init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    // NOTE: disabling typescript check,to follow the signature from src/instrumentations/InstrumentationAbstract/InstrumentationAbstract.ts\n    // which was copied from OTel repo.\n    // TBH, I agree with typescript here, but keeping it disabled for consistency with the base repo\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n    | void {\n    return undefined;\n  }\n\n  public setLogManager(logManager: LogManager): void {\n    this._logManager = logManager;\n  }\n\n  public setSessionManager(sessionManager: SpanSessionManager): void {\n    this._sessionManager = sessionManager;\n  }\n}\n"],"names":["EmbraceInstrumentationBase","InstrumentationAbstract","instrumentationName","instrumentationVersion","config","diag","perf","_diag","_perf","OTelPerformanceManager","_sessionManager","session","getSpanSessionManager","_logManager","log","getLogManager","sessionManager","logManager","init","undefined","setLogManager","setSessionManager"],"mappings":";;;;;AAcO,MAAeA,0BAAAA,SAGZC,uBAAAA,CAAAA;IAOR,WAAA,CAAsB,EACpBC,mBAAmB,EACnBC,sBAAsB,EACtBC,MAAM,EACNC,IAAI,EACJC,IAAI,EACuC,CAAE;QAC7C,KAAK,CAACJ,qBAAqBC,sBAAAA,EAAwBC,MAAAA,CAAAA;;AAEnD,QAAA,IAAIC,IAAAA,EAAM;YACR,IAAI,CAACE,KAAK,GAAGF,IAAAA;AACf,QAAA;AACA,QAAA,IAAI,CAACG,KAAK,GAAGF,IAAAA,IAAQ,IAAIG,sBAAAA,EAAAA;AACzB,QAAA,IAAI,CAACC,eAAe,GAAGC,OAAAA,CAAQC,qBAAqB,EAAA;AACpD,QAAA,IAAI,CAACC,WAAW,GAAGC,GAAAA,CAAIC,aAAa,EAAA;AACtC,IAAA;mCAGA,IAAcC,cAAAA,GAAqC;QACjD,OAAO,IAAI,CAACN,eAAe;AAC7B,IAAA;8BAGA,IAAcO,UAAAA,GAAyB;QACrC,OAAO,IAAI,CAACJ,WAAW;AACzB,IAAA;0CAGA,IAAcP,IAAAA,GAA2B;QACvC,OAAO,IAAI,CAACE,KAAK;AACnB,IAAA;;IAGmBU,IAAAA,GAOV;QACP,OAAOC,SAAAA;AACT,IAAA;AAEOC,IAAAA,aAAAA,CAAcH,UAAsB,EAAQ;QACjD,IAAI,CAACJ,WAAW,GAAGI,UAAAA;AACrB,IAAA;AAEOI,IAAAA,iBAAAA,CAAkBL,cAAkC,EAAQ;QACjE,IAAI,CAACN,eAAe,GAAGM,cAAAA;AACzB,IAAA;AACF;;;;"}