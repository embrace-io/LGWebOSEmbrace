import { TIMEOUT_TIME, WINDOW_USER_EVENTS, EVENT_THROTTLING_TIME_WINDOW } from './constants.js';
import { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/EmbraceInstrumentationBase.js';
import { bulkRemoveEventListener } from '../../../utils/bulkRemoveEventListener/bulkRemoveEventListener.js';
import { bulkAddEventListener } from '../../../utils/bulkAddEventListener/bulkAddEventListener.js';
import { throttle } from '../../../utils/throttle.js';

/**
 *  SpanSessionBrowserActivityInstrumentation will track the user activity and end the session span if there is no
 *  activity for a certain amount of time.
 *  SpanSessionBrowserActivityInstrumentation will initialize new sessions if new activity is detected and there is no
 *  active session.
 * */ class SpanSessionBrowserActivityInstrumentation extends EmbraceInstrumentationBase {
    constructor({ diag } = {}){
        super({
            instrumentationName: 'SpanSessionBrowserActivityInstrumentation',
            instrumentationVersion: '1.0.0',
            diag,
            config: {}
        }), this.disable = ()=>{
            bulkRemoveEventListener({
                target: window,
                events: WINDOW_USER_EVENTS,
                callback: this._onActivityThrottled
            });
            if (this._activityTimeout) {
                clearTimeout(this._activityTimeout);
            }
            this._activityTimeout = null;
        }, this.enable = ()=>{
            bulkAddEventListener({
                target: window,
                events: WINDOW_USER_EVENTS,
                callback: this._onActivityThrottled
            });
        }, this._onInactivity = ()=>{
            this._diag.debug('Inactivity detected');
            if (this._activityTimeout) {
                clearTimeout(this._activityTimeout);
            }
            this._activityTimeout = null;
            this.sessionManager.endSessionSpanInternal('inactivity');
        }, this._onActivity = ()=>{
            this._diag.debug('Activity detected');
            if (this._activityTimeout) {
                clearTimeout(this._activityTimeout);
            }
            // if there was no active session, start one
            if (!this.sessionManager.getSessionId()) {
                this.sessionManager.startSessionSpan({
                    reason: 'activity'
                });
            }
            this._activityTimeout = setTimeout(this._onInactivity, TIMEOUT_TIME);
        };
        this._activityTimeout = null;
        this._onActivityThrottled = throttle(this._onActivity, EVENT_THROTTLING_TIME_WINDOW);
        if (this._config.enabled) {
            this.enable();
        }
    }
}

export { SpanSessionBrowserActivityInstrumentation };
//# sourceMappingURL=SpanSessionBrowserActivityInstrumentation.js.map
