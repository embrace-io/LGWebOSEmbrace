{"version":3,"file":"SpanSessionTimeoutInstrumentation.js","sources":["../../../../../src/instrumentations/session/SpanSessionTimeoutInstrumentation/SpanSessionTimeoutInstrumentation.ts"],"sourcesContent":["import type { TimeoutRef } from '../../../utils/index.js';\nimport { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/index.js';\nimport { TIMEOUT_TIME } from './constants.js';\nimport type { SpanSessionTimeoutInstrumentationArgs } from './types.js';\n\n/**\n *  SpanSessionTimeoutInstrumentation will track how long has a session been active and end it after a certain amount of time.\n *  It will immediately start a new session after the previous one ends.\n **/\nexport class SpanSessionTimeoutInstrumentation extends EmbraceInstrumentationBase {\n  private _sessionTimeout: TimeoutRef | null;\n\n  public constructor({\n    diag,\n    perf,\n  }: SpanSessionTimeoutInstrumentationArgs = {}) {\n    super({\n      instrumentationName: 'SpanSessionTimeoutInstrumentation',\n      instrumentationVersion: '1.0.0',\n      diag,\n      perf,\n      config: {},\n    });\n    this._sessionTimeout = null;\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  public disable = () => {\n    if (this._sessionTimeout) {\n      clearTimeout(this._sessionTimeout);\n    }\n    this._sessionTimeout = null;\n  };\n\n  public enable = () => {\n    this._checkTimeout();\n  };\n\n  private readonly _onTimeout = () => {\n    this._diag.debug('Timeout detected');\n    // clear existing timeout\n    if (this._sessionTimeout) {\n      clearTimeout(this._sessionTimeout);\n    }\n    this.sessionManager.endSessionSpanInternal('timer');\n    this.sessionManager.startSessionSpan({ reason: 'timer' });\n    // set a new check in TIMEOUT_TIME for the session we just started\n    this._sessionTimeout = setTimeout(this._checkTimeout, TIMEOUT_TIME);\n  };\n\n  private readonly _checkTimeout = () => {\n    const currentSessionStartTime = this.sessionManager.getSessionStartTime();\n    // validate that there is an active session, as it may already been finished for other reasons.\n    if (currentSessionStartTime) {\n      // check how much time has passed since the session started\n      const timePassed = this.perf.millisSinceHRTime(currentSessionStartTime);\n      const remainingTime = TIMEOUT_TIME - timePassed;\n      // if the remaining time is 0 or less, the session has already timed out.\n      if (remainingTime <= 0) {\n        // the session has already timed out.\n        this._onTimeout();\n        return;\n      }\n      // if there is time remaining, set a new timeout for check again after it\n      if (this._sessionTimeout) {\n        clearTimeout(this._sessionTimeout);\n      }\n      this._sessionTimeout = setTimeout(this._checkTimeout, remainingTime);\n      return;\n    }\n    // if there is no currentSessionStartTime then there is no active session,\n    //  check again in TIMEOUT_TIME in case a new one is started.\n    if (this._sessionTimeout) {\n      clearTimeout(this._sessionTimeout);\n    }\n    this._sessionTimeout = setTimeout(this._checkTimeout, TIMEOUT_TIME);\n  };\n}\n"],"names":["SpanSessionTimeoutInstrumentation","EmbraceInstrumentationBase","diag","perf","instrumentationName","instrumentationVersion","config","disable","_sessionTimeout","clearTimeout","enable","_checkTimeout","_onTimeout","_diag","debug","sessionManager","endSessionSpanInternal","startSessionSpan","reason","setTimeout","TIMEOUT_TIME","currentSessionStartTime","getSessionStartTime","timePassed","millisSinceHRTime","remainingTime","_config","enabled"],"mappings":";;;AAKA;;;KAIO,MAAMA,iCAAAA,SAA0CC,0BAAAA,CAAAA;IAGrD,WAAA,CAAmB,EACjBC,IAAI,EACJC,IAAI,EACkC,GAAG,EAAE,CAAE;AAC7C,QAAA,KAAK,CAAC;YACJC,mBAAAA,EAAqB,mCAAA;YACrBC,sBAAAA,EAAwB,OAAA;AACxBH,YAAAA,IAAAA;AACAC,YAAAA,IAAAA;AACAG,YAAAA,MAAAA,EAAQ;AACV,SAAA,CAAA,EAAA,IAAA,CAOKC,OAAAA,GAAU,IAAA;YACf,IAAI,IAAI,CAACC,eAAe,EAAE;gBACxBC,YAAAA,CAAa,IAAI,CAACD,eAAe,CAAA;AACnC,YAAA;YACA,IAAI,CAACA,eAAe,GAAG,IAAA;AACzB,QAAA,CAAA,EAAA,IAAA,CAEOE,MAAAA,GAAS,IAAA;AACd,YAAA,IAAI,CAACC,aAAa,EAAA;AACpB,QAAA,CAAA,EAAA,IAAA,CAEiBC,UAAAA,GAAa,IAAA;AAC5B,YAAA,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,kBAAA,CAAA;;YAEjB,IAAI,IAAI,CAACN,eAAe,EAAE;gBACxBC,YAAAA,CAAa,IAAI,CAACD,eAAe,CAAA;AACnC,YAAA;AACA,YAAA,IAAI,CAACO,cAAc,CAACC,sBAAsB,CAAC,OAAA,CAAA;AAC3C,YAAA,IAAI,CAACD,cAAc,CAACE,gBAAgB,CAAC;gBAAEC,MAAAA,EAAQ;AAAQ,aAAA,CAAA;;AAEvD,YAAA,IAAI,CAACV,eAAe,GAAGW,WAAW,IAAI,CAACR,aAAa,EAAES,YAAAA,CAAAA;AACxD,QAAA,CAAA,EAAA,IAAA,CAEiBT,aAAAA,GAAgB,IAAA;AAC/B,YAAA,MAAMU,uBAAAA,GAA0B,IAAI,CAACN,cAAc,CAACO,mBAAmB,EAAA;;AAEvE,YAAA,IAAID,uBAAAA,EAAyB;;AAE3B,gBAAA,MAAME,aAAa,IAAI,CAACpB,IAAI,CAACqB,iBAAiB,CAACH,uBAAAA,CAAAA;AAC/C,gBAAA,MAAMI,gBAAgBL,YAAAA,GAAeG,UAAAA;;AAErC,gBAAA,IAAIE,iBAAiB,CAAA,EAAG;;AAEtB,oBAAA,IAAI,CAACb,UAAU,EAAA;AACf,oBAAA;AACF,gBAAA;;gBAEA,IAAI,IAAI,CAACJ,eAAe,EAAE;oBACxBC,YAAAA,CAAa,IAAI,CAACD,eAAe,CAAA;AACnC,gBAAA;AACA,gBAAA,IAAI,CAACA,eAAe,GAAGW,WAAW,IAAI,CAACR,aAAa,EAAEc,aAAAA,CAAAA;AACtD,gBAAA;AACF,YAAA;;;YAGA,IAAI,IAAI,CAACjB,eAAe,EAAE;gBACxBC,YAAAA,CAAa,IAAI,CAACD,eAAe,CAAA;AACnC,YAAA;AACA,YAAA,IAAI,CAACA,eAAe,GAAGW,WAAW,IAAI,CAACR,aAAa,EAAES,YAAAA,CAAAA;AACxD,QAAA,CAAA;QAvDE,IAAI,CAACZ,eAAe,GAAG,IAAA;AACvB,QAAA,IAAI,IAAI,CAACkB,OAAO,CAACC,OAAO,EAAE;AACxB,YAAA,IAAI,CAACjB,MAAM,EAAA;AACb,QAAA;AACF,IAAA;AAoDF;;;;"}