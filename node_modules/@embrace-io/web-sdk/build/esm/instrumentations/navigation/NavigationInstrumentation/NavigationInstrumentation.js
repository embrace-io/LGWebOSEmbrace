import { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/EmbraceInstrumentationBase.js';
import { EMB_TYPES, KEY_VIEW_NAME, KEY_EMB_TYPE, KEY_EMB_INSTRUMENTATION } from '../../../constants/attributes.js';

// Regular expression to match path options in the format "(option)"
// Used to clean up paths that are like "/order/:orderState(pending|shipped|delivered)" to "/order/:orderState"
const PATH_OPTIONS_RE = /\(.*?\)/g;
class NavigationInstrumentation extends EmbraceInstrumentationBase {
    constructor({ diag, shouldCleanupPathOptionsFromRouteName = true }){
        super({
            instrumentationName: 'NavigationInstrumentation',
            instrumentationVersion: '1.0.0',
            diag,
            config: {}
        }), this._shouldCleanupPathOptionsFromRouteName = true, this._currentRoute = null, this._currentRouteSpan = null, this._instrumentationType = null, this._removeSessionStartedFn = null, this._removeSessionEndedFn = null, this.setInstrumentationType = (instrumentationType)=>{
            this._instrumentationType = instrumentationType;
        }, this.setCurrentRoute = (route)=>{
            if (!this._config.enabled) {
                return;
            }
            if (route.url !== this._currentRoute?.url) {
                this._endRouteSpan();
                this._startRouteSpan(route);
                this._currentRoute = route;
            }
        }, this._setupSessionListeners = ()=>{
            if (!this._removeSessionStartedFn) {
                this._removeSessionStartedFn = this.sessionManager.addSessionStartedListener(()=>{
                    if (this._currentRoute && !this._currentRouteSpan) {
                        this._diag.debug('Session started, starting route span.');
                        this._startRouteSpan(this._currentRoute);
                    }
                });
            }
            if (!this._removeSessionEndedFn) {
                this._removeSessionEndedFn = this.sessionManager.addSessionEndedListener(()=>{
                    if (this._currentRouteSpan) {
                        this._diag.debug('Session ended, ending route span.');
                        this._endRouteSpan();
                    }
                });
            }
        }, this._cleanUpSessionListeners = ()=>{
            if (this._removeSessionStartedFn) {
                this._removeSessionStartedFn();
                this._removeSessionStartedFn = null;
            }
            if (this._removeSessionEndedFn) {
                this._removeSessionEndedFn();
                this._removeSessionEndedFn = null;
            }
        }, this._startRouteSpan = (route)=>{
            this._diag.debug(`Starting route span for url: ${route.url}`);
            this._setupSessionListeners();
            const pathName = this._shouldCleanupPathOptionsFromRouteName ? route.path.replace(PATH_OPTIONS_RE, '') : route.path;
            this._currentRouteSpan = this.tracer.startSpan(pathName, {
                attributes: {
                    [KEY_EMB_TYPE]: EMB_TYPES.View,
                    [KEY_VIEW_NAME]: pathName
                }
            });
            if (this._instrumentationType) {
                this._currentRouteSpan.setAttribute(KEY_EMB_INSTRUMENTATION, this._instrumentationType);
            }
            return this._currentRouteSpan;
        }, this._endRouteSpan = ()=>{
            if (this._currentRouteSpan && this._currentRoute) {
                this._diag.debug(`Ending route span for url: ${this._currentRoute.url}`);
                this._currentRouteSpan.end();
                this._currentRouteSpan = null;
            }
        }, this.enable = ()=>{
            this._diag.debug('NavigationInstrumentation enabled, listening for navigation events.');
        }, this.disable = ()=>{
            this._cleanUpSessionListeners();
            this.setConfig({
                enabled: false
            });
            this._diag.debug('NavigationInstrumentation disabled, stopped listening for navigation events.');
        };
        this._shouldCleanupPathOptionsFromRouteName = shouldCleanupPathOptionsFromRouteName;
        if (this._config.enabled) {
            this.enable();
        }
    }
}

export { NavigationInstrumentation };
//# sourceMappingURL=NavigationInstrumentation.js.map
