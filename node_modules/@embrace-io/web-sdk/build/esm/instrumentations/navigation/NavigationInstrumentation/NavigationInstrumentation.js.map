{"version":3,"file":"NavigationInstrumentation.js","sources":["../../../../../src/instrumentations/navigation/NavigationInstrumentation/NavigationInstrumentation.ts"],"sourcesContent":["import { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/index.js';\nimport type { NavigationInstrumentationArgs, Route } from './types.js';\nimport type { Span } from '@opentelemetry/api';\nimport {\n  EMB_TYPES,\n  KEY_EMB_TYPE,\n  KEY_VIEW_NAME,\n  KEY_EMB_INSTRUMENTATION,\n} from '../../../constants/index.js';\nimport type { EMB_NAVIGATION_INSTRUMENTATIONS } from '../../../constants/index.js';\n\n// Regular expression to match path options in the format \"(option)\"\n// Used to clean up paths that are like \"/order/:orderState(pending|shipped|delivered)\" to \"/order/:orderState\"\nconst PATH_OPTIONS_RE = /\\(.*?\\)/g;\n\nexport class NavigationInstrumentation extends EmbraceInstrumentationBase {\n  private readonly _shouldCleanupPathOptionsFromRouteName: boolean = true;\n  private _currentRoute: Route | null = null;\n  private _currentRouteSpan: Span | null = null;\n  private _instrumentationType: EMB_NAVIGATION_INSTRUMENTATIONS | null = null;\n  private _removeSessionStartedFn: (() => void) | null = null;\n  private _removeSessionEndedFn: (() => void) | null = null;\n\n  public constructor({\n    diag,\n    shouldCleanupPathOptionsFromRouteName = true,\n  }: NavigationInstrumentationArgs) {\n    super({\n      instrumentationName: 'NavigationInstrumentation',\n      instrumentationVersion: '1.0.0',\n      diag,\n      config: {},\n    });\n\n    this._shouldCleanupPathOptionsFromRouteName =\n      shouldCleanupPathOptionsFromRouteName;\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  public setInstrumentationType = (\n    instrumentationType: EMB_NAVIGATION_INSTRUMENTATIONS\n  ) => {\n    this._instrumentationType = instrumentationType;\n  };\n\n  public setCurrentRoute = (route: Route) => {\n    if (!this._config.enabled) {\n      return;\n    }\n\n    if (route.url !== this._currentRoute?.url) {\n      this._endRouteSpan();\n      this._startRouteSpan(route);\n      this._currentRoute = route;\n    }\n  };\n\n  private readonly _setupSessionListeners = () => {\n    if (!this._removeSessionStartedFn) {\n      this._removeSessionStartedFn =\n        this.sessionManager.addSessionStartedListener(() => {\n          if (this._currentRoute && !this._currentRouteSpan) {\n            this._diag.debug('Session started, starting route span.');\n\n            this._startRouteSpan(this._currentRoute);\n          }\n        });\n    }\n\n    if (!this._removeSessionEndedFn) {\n      this._removeSessionEndedFn = this.sessionManager.addSessionEndedListener(\n        () => {\n          if (this._currentRouteSpan) {\n            this._diag.debug('Session ended, ending route span.');\n\n            this._endRouteSpan();\n          }\n        }\n      );\n    }\n  };\n\n  private readonly _cleanUpSessionListeners = () => {\n    if (this._removeSessionStartedFn) {\n      this._removeSessionStartedFn();\n      this._removeSessionStartedFn = null;\n    }\n\n    if (this._removeSessionEndedFn) {\n      this._removeSessionEndedFn();\n      this._removeSessionEndedFn = null;\n    }\n  };\n\n  private readonly _startRouteSpan = (route: Route): Span => {\n    this._diag.debug(`Starting route span for url: ${route.url}`);\n    this._setupSessionListeners();\n\n    const pathName = this._shouldCleanupPathOptionsFromRouteName\n      ? route.path.replace(PATH_OPTIONS_RE, '')\n      : route.path;\n    this._currentRouteSpan = this.tracer.startSpan(pathName, {\n      attributes: {\n        [KEY_EMB_TYPE]: EMB_TYPES.View,\n        [KEY_VIEW_NAME]: pathName,\n      },\n    });\n\n    if (this._instrumentationType) {\n      this._currentRouteSpan.setAttribute(\n        KEY_EMB_INSTRUMENTATION,\n        this._instrumentationType\n      );\n    }\n\n    return this._currentRouteSpan;\n  };\n\n  private readonly _endRouteSpan = () => {\n    if (this._currentRouteSpan && this._currentRoute) {\n      this._diag.debug(`Ending route span for url: ${this._currentRoute.url}`);\n      this._currentRouteSpan.end();\n      this._currentRouteSpan = null;\n    }\n  };\n\n  public enable = () => {\n    this._diag.debug(\n      'NavigationInstrumentation enabled, listening for navigation events.'\n    );\n  };\n\n  public disable = () => {\n    this._cleanUpSessionListeners();\n    this.setConfig({\n      enabled: false,\n    });\n    this._diag.debug(\n      'NavigationInstrumentation disabled, stopped listening for navigation events.'\n    );\n  };\n}\n"],"names":["PATH_OPTIONS_RE","NavigationInstrumentation","EmbraceInstrumentationBase","diag","shouldCleanupPathOptionsFromRouteName","instrumentationName","instrumentationVersion","config","_shouldCleanupPathOptionsFromRouteName","_currentRoute","_currentRouteSpan","_instrumentationType","_removeSessionStartedFn","_removeSessionEndedFn","setInstrumentationType","instrumentationType","setCurrentRoute","route","_config","enabled","url","_endRouteSpan","_startRouteSpan","_setupSessionListeners","sessionManager","addSessionStartedListener","_diag","debug","addSessionEndedListener","_cleanUpSessionListeners","pathName","path","replace","tracer","startSpan","attributes","KEY_EMB_TYPE","EMB_TYPES","View","KEY_VIEW_NAME","setAttribute","KEY_EMB_INSTRUMENTATION","end","enable","disable","setConfig"],"mappings":"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"}