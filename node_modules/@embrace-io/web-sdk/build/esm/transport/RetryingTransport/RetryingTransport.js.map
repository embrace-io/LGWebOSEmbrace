{"version":3,"file":"RetryingTransport.js","sources":["../../../../src/transport/RetryingTransport/RetryingTransport.ts"],"sourcesContent":["import type {\n  ExportResponse,\n  IExporterTransport,\n} from '@opentelemetry/otlp-exporter-base';\nimport type { PerformanceManager } from '../../utils/index.js';\nimport { OTelPerformanceManager } from '../../utils/index.js';\nimport {\n  BACKOFF_MULTIPLIER,\n  INITIAL_BACKOFF,\n  JITTER,\n  MAX_ATTEMPTS,\n  MAX_BACKOFF,\n} from './constants.js';\n\n/**\n * Get a pseudo-random jitter that falls in the range of [-JITTER, +JITTER]\n */\nconst getJitter = () => Math.random() * (2 * JITTER) - JITTER;\n\n// Taken directly from open-telemetry/opentelemetry-js/experimental/packages/otlp-exporter-base/src/retrying-transport.ts\n// File is not exposed externally\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class RetryingTransport implements IExporterTransport {\n  public constructor(\n    private readonly _transport: IExporterTransport,\n    private readonly _perf: PerformanceManager = new OTelPerformanceManager()\n  ) {}\n\n  public async send(\n    data: Uint8Array,\n    timeoutMillis: number\n  ): Promise<ExportResponse> {\n    const deadline = this._perf.getNowMillis() + timeoutMillis;\n    let result = await this._transport.send(data, timeoutMillis);\n    let attempts = MAX_ATTEMPTS;\n    let nextBackoff = INITIAL_BACKOFF;\n\n    while (result.status === 'retryable' && attempts > 0) {\n      attempts--;\n\n      // use maximum of computed backoff and 0 to avoid negative timeouts\n      const backoff = Math.max(\n        Math.min(nextBackoff, MAX_BACKOFF) + getJitter(),\n        0\n      );\n      nextBackoff = nextBackoff * BACKOFF_MULTIPLIER;\n      const retryInMillis = result.retryInMillis ?? backoff;\n\n      // return when expected retry time is after the export deadline.\n      const remainingTimeoutMillis = deadline - this._perf.getNowMillis();\n      if (retryInMillis > remainingTimeoutMillis) {\n        return result;\n      }\n\n      result = await this._retry(data, remainingTimeoutMillis, retryInMillis);\n    }\n\n    return result;\n  }\n\n  public shutdown() {\n    this._transport.shutdown();\n  }\n\n  private _retry(\n    data: Uint8Array,\n    timeoutMillis: number,\n    inMillis: number\n  ): Promise<ExportResponse> {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        this._transport.send(data, timeoutMillis).then(resolve, reject);\n      }, inMillis);\n    });\n  }\n}\n"],"names":["getJitter","Math","random","JITTER","RetryingTransport","_perf","OTelPerformanceManager","_transport","send","data","timeoutMillis","deadline","getNowMillis","result","attempts","MAX_ATTEMPTS","nextBackoff","INITIAL_BACKOFF","status","backoff","max","min","MAX_BACKOFF","BACKOFF_MULTIPLIER","retryInMillis","remainingTimeoutMillis","_retry","shutdown","inMillis","Promise","resolve","reject","setTimeout","then"],"mappings":";;;AAcA;;IAGA,MAAMA,YAAY,IAAMC,IAAAA,CAAKC,MAAM,EAAA,IAAM,CAAA,GAAIC,MAAK,CAAA,GAAKA,MAAAA;AAEvD;AACA;AAEA;;;;;;;;;;;;;;AAcC,IACM,MAAMC,iBAAAA,CAAAA;AACX,IAAA,WAAA,CACE,UAA+C,EAC/C,KAAiBC,GAA4B,IAAIC,wBAAwB,CACzE;aAFiBC,UAAAA,GAAAA,UAAAA;aACAF,KAAAA,GAAAA,KAAAA;AAChB,IAAA;AAEH,IAAA,MAAaG,IAAAA,CACXC,IAAgB,EAChBC,aAAqB,EACI;AACzB,QAAA,MAAMC,WAAW,IAAI,CAACN,KAAK,CAACO,YAAY,EAAA,GAAKF,aAAAA;QAC7C,IAAIG,MAAAA,GAAS,MAAM,IAAI,CAACN,UAAU,CAACC,IAAI,CAACC,IAAAA,EAAMC,aAAAA,CAAAA;AAC9C,QAAA,IAAII,QAAAA,GAAWC,YAAAA;AACf,QAAA,IAAIC,WAAAA,GAAcC,eAAAA;AAElB,QAAA,MAAOJ,MAAAA,CAAOK,MAAM,KAAK,WAAA,IAAeJ,WAAW,CAAA,CAAG;AACpDA,YAAAA,QAAAA,EAAAA;;YAGA,MAAMK,OAAAA,GAAUlB,KAAKmB,GAAG,CACtBnB,KAAKoB,GAAG,CAACL,WAAAA,EAAaM,WAAAA,CAAAA,GAAetB,SAAAA,EAAAA,EACrC,CAAA,CAAA;AAEFgB,YAAAA,WAAAA,GAAcA,WAAAA,GAAcO,kBAAAA;YAC5B,MAAMC,aAAAA,GAAgBX,MAAAA,CAAOW,aAAa,IAAIL,OAAAA;;AAG9C,YAAA,MAAMM,yBAAyBd,QAAAA,GAAW,IAAI,CAACN,KAAK,CAACO,YAAY,EAAA;AACjE,YAAA,IAAIY,gBAAgBC,sBAAAA,EAAwB;gBAC1C,OAAOZ,MAAAA;AACT,YAAA;AAEAA,YAAAA,MAAAA,GAAS,MAAM,IAAI,CAACa,MAAM,CAACjB,MAAMgB,sBAAAA,EAAwBD,aAAAA,CAAAA;AAC3D,QAAA;QAEA,OAAOX,MAAAA;AACT,IAAA;IAEOc,QAAAA,GAAW;QAChB,IAAI,CAACpB,UAAU,CAACoB,QAAQ,EAAA;AAC1B,IAAA;AAEQD,IAAAA,MAAAA,CACNjB,IAAgB,EAChBC,aAAqB,EACrBkB,QAAgB,EACS;QACzB,OAAO,IAAIC,OAAAA,CAAQ,CAACC,OAAAA,EAASC,MAAAA,GAAAA;YAC3BC,UAAAA,CAAW,IAAA;gBACT,IAAI,CAACzB,UAAU,CAACC,IAAI,CAACC,IAAAA,EAAMC,aAAAA,CAAAA,CAAeuB,IAAI,CAACH,OAAAA,EAASC,MAAAA,CAAAA;YAC1D,CAAA,EAAGH,QAAAA,CAAAA;AACL,QAAA,CAAA,CAAA;AACF,IAAA;AACF;;;;"}