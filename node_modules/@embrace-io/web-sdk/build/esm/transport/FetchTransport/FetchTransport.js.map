{"version":3,"file":"FetchTransport.js","sources":["../../../../src/transport/FetchTransport/FetchTransport.ts"],"sourcesContent":["import type {\n  ExportResponse,\n  IExporterTransport,\n} from '@opentelemetry/otlp-exporter-base';\nimport type { FetchRequestParameters } from './types.js';\n\nexport class FetchTransport implements IExporterTransport {\n  public constructor(private readonly _config: FetchRequestParameters) {}\n\n  // _compressRequest compresses the data using the gzip algorithm.\n  // Embrace Data endpoints require the data to be compressed.\n  private static async _compressRequest(data: Uint8Array): Promise<Uint8Array> {\n    const stream = new CompressionStream('gzip');\n    const writer = stream.writable.getWriter();\n\n    void writer.write(data);\n    void writer.close();\n\n    const compressedChunks: Uint8Array[] = [];\n    const reader = stream.readable.getReader();\n\n    let done = false;\n    while (!done) {\n      const result = await reader.read();\n\n      if (result.value) {\n        compressedChunks.push(result.value);\n      }\n\n      done = result.done;\n    }\n\n    const compressedData = new Uint8Array(\n      compressedChunks.reduce((acc, chunk) => acc + chunk.length, 0)\n    );\n\n    let offset = 0;\n\n    for (const chunk of compressedChunks) {\n      compressedData.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return compressedData;\n  }\n\n  public send(\n    data: Uint8Array,\n    timeoutMillis: number\n  ): Promise<ExportResponse> {\n    return this._asyncSend(data, timeoutMillis);\n  }\n\n  public shutdown(): void {\n    // Intentionally left empty, nothing to do.\n  }\n\n  public async _asyncSend(\n    data: Uint8Array,\n    timeoutMillis: number\n  ): Promise<ExportResponse> {\n    let request = data;\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...this._config.headers,\n    };\n\n    if (this._config.compression === 'gzip') {\n      request = await FetchTransport._compressRequest(data);\n\n      headers['Content-Encoding'] = 'gzip';\n      headers['Content-Length'] = request.length.toString();\n    }\n\n    try {\n      const response = await fetch(this._config.url, {\n        method: 'POST',\n        keepalive: true,\n        headers,\n        body: request,\n        signal: AbortSignal.timeout(timeoutMillis),\n      });\n\n      if (response.ok) {\n        return { status: 'success' };\n      } else {\n        return { status: 'failure', error: new Error('Fetch request failed') };\n      }\n    } catch {\n      return { status: 'failure', error: new Error('Fetch request errored') };\n    }\n  }\n}\n"],"names":["FetchTransport","_config","_compressRequest","data","stream","CompressionStream","writer","writable","getWriter","write","close","compressedChunks","reader","readable","getReader","done","result","read","value","push","compressedData","Uint8Array","reduce","acc","chunk","length","offset","set","send","timeoutMillis","_asyncSend","shutdown","request","headers","compression","toString","response","fetch","url","method","keepalive","body","signal","AbortSignal","timeout","ok","status","error","Error"],"mappings":"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"}