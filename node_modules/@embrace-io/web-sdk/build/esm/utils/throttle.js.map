{"version":3,"file":"throttle.js","sources":["../../../src/utils/throttle.ts"],"sourcesContent":["/** throttle wraps a function so it can only be called once, and then a time window must pass before it can be called again\n * any subsequent calls before the time window has passed will be ignored.\n *\n * NOTE: if the wrapped function makes use of \"this\", it must be properly bind from the caller, as this wrapper will not bind it.\n * For this, we suggest you always pass functions declared as fat arrow functions, as they have their \"this\" lexically defined.\n * */\nexport const throttle = <F extends (...args: Parameters<F>) => ReturnType<F>>(\n  func: F,\n  timeout = 1000\n) => {\n  let isWaiting = false;\n  return (...args: Parameters<F>) => {\n    if (isWaiting) {\n      return;\n    }\n    func(...args);\n    setTimeout(() => {\n      isWaiting = false;\n    }, timeout);\n    isWaiting = true;\n  };\n};\n"],"names":["throttle","func","timeout","isWaiting","args","setTimeout"],"mappings":"AAAA;;;;;AAKG,MACI,MAAMA,QAAAA,GAAW,CACtBC,IAAAA,EACAC,UAAU,IAAI,GAAA;AAEd,IAAA,IAAIC,SAAAA,GAAY,KAAA;AAChB,IAAA,OAAO,CAAC,GAAGC,IAAAA,GAAAA;AACT,QAAA,IAAID,SAAAA,EAAW;AACb,YAAA;AACF,QAAA;QACAF,IAAAA,CAAAA,GAAQG,IAAAA,CAAAA;QACRC,UAAAA,CAAW,IAAA;YACTF,SAAAA,GAAY,KAAA;QACd,CAAA,EAAGD,OAAAA,CAAAA;QACHC,SAAAA,GAAY,IAAA;AACd,IAAA,CAAA;AACF;;;;"}