{"version":3,"file":"EmbraceSpanStorage.js","sources":["../../../../src/utils/EmbraceSpanStorage/EmbraceSpanStorage.ts"],"sourcesContent":["import type { DiagLogger, Tracer } from '@opentelemetry/api';\nimport { diag } from '@opentelemetry/api';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-web';\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-web';\n\nconst PENDING_SPANS_STORAGE_KEY_PREFIX = 'embrace_pending_';\nconst MAX_PENDING_SPANS_ITEMS = 10;\n\nexport interface SpanStorageOptions {\n  storage?: Storage;\n  diag?: DiagLogger;\n  storedSpansExpireTimeoutMS?: number;\n  onExpiredSpansExport?: (spans: ReadableSpan[]) => void;\n}\n\n// EmbraceSpanStorage is used to keep pending spans that are not meant to be exported (yet) in localStorage,\n// and periodically checks whenever those stored spans are ready to be exported.\n// This functionality has some custom logic to be able to store these spans as JSONs and then recreate them back\n// that could eventually be improved. In particular the things that would need to be improved are:\n// - Avoid serializing as JSON and instead try to use a customExporter that produces the body as it was going to be\n//   sent over the wire (serialized, compressed, etc), and store that, so that later when it decides to export those,\n//   it's just using that body as a regular fetch call.\n// - Create a service worker that is responsible for tracking the pending spans and deciding when to actually export them.\n//   That way we would avoid a potential race condition where two different tabs would try to export the same data.\n// - Make this a more comprehensive component so that the EmbraceSessionBatchedSpanProcessor doesn't need to be in the\n//   middle of SpanSessionVisibilityInstrumentation and this component. Ideally this component would know when and how\n//   to take snapshots of the current pending spans and the current session span at any moment, so that the visibility\n//   instrumentation doesn't need to be telling that to the batch span processor.\nexport class EmbraceSpanStorage {\n  private readonly _noExportTracer: Tracer;\n  private readonly _storage: Storage;\n  private readonly _diag: DiagLogger;\n  private readonly _onExpiredSpansExport?: (spans: ReadableSpan[]) => void;\n  private readonly _storedSpansExpireTimeoutMS: number;\n  private _checkExpiredSpansInterval?: ReturnType<typeof setInterval>;\n\n  public constructor({\n    storage = window.localStorage,\n    diag: diagParam = diag.createComponentLogger({\n      namespace: 'EmbraceSpanStorage',\n    }),\n    storedSpansExpireTimeoutMS = 60 * 60 * 1000, // 1 hour\n    onExpiredSpansExport,\n  }: SpanStorageOptions = {}) {\n    this._noExportTracer = new BasicTracerProvider().getTracer(\n      'embrace-web-sdk-sessions'\n    );\n    this._storage = storage;\n    this._diag = diagParam;\n    this._storedSpansExpireTimeoutMS = storedSpansExpireTimeoutMS;\n    this._onExpiredSpansExport = onExpiredSpansExport;\n\n    this.startExpiredSpansCheck();\n  }\n\n  public storePendingSpans(\n    sessionId: string,\n    sessionSpan: ReadableSpan,\n    pendingSpans: ReadableSpan[]\n  ): void {\n    try {\n      // If this session was already stored, clear it first:\n      this.clearStoredSpans(sessionId);\n\n      if (this._getPendingSpansKeys().length >= MAX_PENDING_SPANS_ITEMS) {\n        this._diag.warn(\n          'Not storing pending spans as the max number of items was reached'\n        );\n        return;\n      }\n\n      const key = `${PENDING_SPANS_STORAGE_KEY_PREFIX}${sessionId}_${Date.now()}`;\n      this._storage.setItem(\n        key,\n        JSON.stringify([sessionSpan, ...pendingSpans], (key, value) =>\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          key.startsWith('_') ? undefined : value\n        )\n      );\n    } catch (error) {\n      this._diag.error('Failed to store spans to storage:', error);\n    }\n  }\n\n  public clearStoredSpans(sessionId: string): void {\n    try {\n      const prefix = `${PENDING_SPANS_STORAGE_KEY_PREFIX}${sessionId}_`;\n      this._getPendingSpansKeys().forEach(key => {\n        if (key.startsWith(prefix)) {\n          this._storage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      this._diag.error('Failed to clear stored spans from storage:', error);\n    }\n  }\n\n  public startExpiredSpansCheck(): void {\n    this._checkExpiredSpansInterval = setInterval(\n      () => {\n        this.checkAndExportExpiredSpans();\n      },\n      5 * 60 * 1000\n    ); // Check every 5 minutes\n  }\n\n  public stopExpiredSpansCheck(): void {\n    if (this._checkExpiredSpansInterval) {\n      clearInterval(this._checkExpiredSpansInterval);\n      this._checkExpiredSpansInterval = undefined;\n    }\n  }\n\n  public checkAndExportExpiredSpans(): void {\n    try {\n      const keys = this._getPendingSpansKeys();\n      if (keys.length === 0) {\n        return;\n      }\n\n      const currentTime = Date.now();\n      keys.forEach(key => {\n        const parts = key.split('_');\n        const storedTime = parseInt(parts[parts.length - 1], 10);\n\n        if (isNaN(storedTime)) {\n          this._diag.error(\n            'Found invalid timestamp in stored span:',\n            storedTime\n          );\n          this._storage.removeItem(key);\n        }\n\n        if (currentTime - storedTime <= this._storedSpansExpireTimeoutMS) {\n          return;\n        }\n\n        const storedData = this._storage.getItem(key);\n        if (!storedData) return;\n\n        try {\n          const spans: ReadableSpan[] = [];\n          for (const storedSpan of JSON.parse(storedData) as ReadableSpan[]) {\n            const span = this._noExportTracer.startSpan(storedSpan.name, {\n              kind: storedSpan.kind,\n              attributes: storedSpan.attributes,\n              links: storedSpan.links,\n              startTime: storedSpan.startTime,\n            });\n            span.setStatus(storedSpan.status);\n            span.end(storedSpan.endTime);\n            spans.push(span as unknown as ReadableSpan);\n          }\n\n          if (this._onExpiredSpansExport && spans.length > 0) {\n            this._onExpiredSpansExport(spans);\n          }\n        } catch (e) {\n          this._diag.error('Failed to process expired spans:', e);\n        }\n\n        // Always remove the storage item even if processing failed\n        this._storage.removeItem(key);\n      });\n    } catch (e) {\n      this._diag.error('Failed to check and export expired spans:', e);\n    }\n  }\n\n  public _getPendingSpansKeys(): string[] {\n    const keys: string[] = [];\n    for (let i = 0; i < this._storage.length; i++) {\n      const key = this._storage.key(i);\n      if (key && key.startsWith(PENDING_SPANS_STORAGE_KEY_PREFIX)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  }\n\n  public destroy(): void {\n    this.stopExpiredSpansCheck();\n  }\n}\n"],"names":["PENDING_SPANS_STORAGE_KEY_PREFIX","MAX_PENDING_SPANS_ITEMS","EmbraceSpanStorage","storage","window","localStorage","diag","diagParam","createComponentLogger","namespace","storedSpansExpireTimeoutMS","onExpiredSpansExport","_noExportTracer","BasicTracerProvider","getTracer","_storage","_diag","_storedSpansExpireTimeoutMS","_onExpiredSpansExport","startExpiredSpansCheck","storePendingSpans","sessionId","sessionSpan","pendingSpans","clearStoredSpans","_getPendingSpansKeys","length","warn","key","Date","now","setItem","JSON","stringify","value","startsWith","undefined","error","prefix","forEach","removeItem","_checkExpiredSpansInterval","setInterval","checkAndExportExpiredSpans","stopExpiredSpansCheck","clearInterval","keys","currentTime","parts","split","storedTime","parseInt","isNaN","storedData","getItem","spans","storedSpan","parse","span","startSpan","name","kind","attributes","links","startTime","setStatus","status","end","endTime","push","e","i","destroy"],"mappings":"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"}