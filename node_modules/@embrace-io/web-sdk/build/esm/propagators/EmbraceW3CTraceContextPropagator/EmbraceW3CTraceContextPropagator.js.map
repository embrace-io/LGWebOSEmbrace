{"version":3,"file":"EmbraceW3CTraceContextPropagator.js","sources":["../../../../src/propagators/EmbraceW3CTraceContextPropagator/EmbraceW3CTraceContextPropagator.ts"],"sourcesContent":["import { W3CTraceContextPropagator } from '@opentelemetry/core';\nimport { defaultTextMapGetter, trace } from '@opentelemetry/api';\nimport type { Context, TextMapSetter } from '@opentelemetry/api';\nimport { KEY_EMB_W3C_TRACEPARENT } from '../../constants/index.js';\n\nexport class EmbraceW3CTraceContextPropagator extends W3CTraceContextPropagator {\n  public override inject(\n    context: Context,\n    carrier: unknown,\n    setter: TextMapSetter\n  ) {\n    super.inject(context, carrier, setter);\n\n    // Add the injected Traceparent header as an attribute to the span in the current\n    // context if both are available\n    const span = trace.getSpan(context);\n    if (span) {\n      const traceparent = defaultTextMapGetter.get(carrier, 'traceparent');\n      if (traceparent) {\n        span.setAttribute(KEY_EMB_W3C_TRACEPARENT, traceparent);\n      }\n    }\n  }\n}\n"],"names":["EmbraceW3CTraceContextPropagator","W3CTraceContextPropagator","inject","context","carrier","setter","span","trace","getSpan","traceparent","defaultTextMapGetter","get","setAttribute","KEY_EMB_W3C_TRACEPARENT"],"mappings":";;;;AAKO,MAAMA,gCAAAA,SAAyCC,yBAAAA,CAAAA;AACpCC,IAAAA,MAAAA,CACdC,OAAgB,EAChBC,OAAgB,EAChBC,MAAqB,EACrB;QACA,KAAK,CAACH,MAAAA,CAAOC,OAAAA,EAASC,OAAAA,EAASC,MAAAA,CAAAA;;;QAI/B,MAAMC,IAAAA,GAAOC,KAAAA,CAAMC,OAAO,CAACL,OAAAA,CAAAA;AAC3B,QAAA,IAAIG,IAAAA,EAAM;AACR,YAAA,MAAMG,WAAAA,GAAcC,oBAAAA,CAAqBC,GAAG,CAACP,OAAAA,EAAS,aAAA,CAAA;AACtD,YAAA,IAAIK,WAAAA,EAAa;gBACfH,IAAAA,CAAKM,YAAY,CAACC,uBAAAA,EAAyBJ,WAAAA,CAAAA;AAC7C,YAAA;AACF,QAAA;AACF,IAAA;AACF;;;;"}