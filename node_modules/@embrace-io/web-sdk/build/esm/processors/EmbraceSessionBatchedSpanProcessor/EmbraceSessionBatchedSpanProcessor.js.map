{"version":3,"file":"EmbraceSessionBatchedSpanProcessor.js","sources":["../../../../src/processors/EmbraceSessionBatchedSpanProcessor/EmbraceSessionBatchedSpanProcessor.ts"],"sourcesContent":["import type { ExportResult } from '@opentelemetry/core';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  internal,\n} from '@opentelemetry/core';\nimport type { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-web'; // TODO: don't rely on internal API\nimport { EMB_TYPES, KEY_EMB_TYPE } from '../../constants/index.js';\nimport type { SessionSpan } from '../../instrumentations/index.js';\nimport { EmbraceProcessor } from '../EmbraceProcessor/index.js';\nimport type { EmbraceSessionBatchedSpanProcessorArgs } from './types.js';\nimport type { LimitManagerInternal } from '../../managers/index.js';\nimport { EmbraceSpanStorage } from '../../utils/index.js';\n\nconst isSessionSpan = (span: ReadableSpan | SessionSpan): span is SessionSpan =>\n  span.attributes[KEY_EMB_TYPE] === EMB_TYPES.Session;\n\nexport class EmbraceSessionBatchedSpanProcessor extends EmbraceProcessor {\n  private readonly _shutdownOnce: BindOnceFuture<void>;\n  private _pendingSpans: ReadableSpan[] = [];\n  private readonly _exporter: SpanExporter;\n  private readonly _limitManager: LimitManagerInternal;\n  private readonly _spanStorage: EmbraceSpanStorage;\n\n  public constructor({\n    exporter,\n    limitManager,\n    storage = window.localStorage,\n    storedSpansExpireTimeoutMS,\n    ...parentArgs\n  }: EmbraceSessionBatchedSpanProcessorArgs) {\n    super({\n      ...parentArgs,\n      processorName: 'EmbraceSessionBatchedSpanProcessor',\n    });\n    this._exporter = exporter;\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._limitManager = limitManager;\n    this._spanStorage = new EmbraceSpanStorage({\n      storage,\n      diag: parentArgs.diag,\n      onExpiredSpansExport: (spans: ReadableSpan[]) => {\n        this._exportSpans(spans);\n      },\n      storedSpansExpireTimeoutMS,\n    });\n  }\n\n  public override forceFlush(): Promise<void> {\n    this.diag.debug(\n      'forceFlush called for EmbraceSessionBatchedSpanProcessor. This is a no op'\n    );\n    return Promise.resolve(undefined);\n  }\n\n  public onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      this.diag.debug('span ended after processor shutdown. Ignoring span.');\n      return;\n    }\n\n    if (!isSessionSpan(span)) {\n      this.diag.debug('non-session span ended. Adding to pending spans queue.');\n      if (this._limitManager.dropReadableSpan(span)) {\n        return;\n      }\n      this._pendingSpans.push(span);\n    } else {\n      this.diag.debug('session span ended. Exporting all pending spans.');\n      this._exportSpans([span, ...this._pendingSpans]);\n      this._pendingSpans = [];\n    }\n  }\n\n  private _exportSpans(spans: ReadableSpan[]): void {\n    internal\n      ._export(this._exporter, spans)\n      .then((result: ExportResult) => {\n        if (result.code === ExportResultCode.FAILED) {\n          this.diag.error(\n            `spans failed to export: ${result.error?.message || 'unknown error'}`\n          );\n        }\n      })\n      // Seems like everything related to the export logic does a good job of catching and only ever resolving with\n      // an ExportResult even on failure: https://github.com/open-telemetry/opentelemetry-js/blob/cf6dffeebcf72c42b2cb4d2bf2db720369b53081/packages/opentelemetry-core/src/internal/exporter.ts#L37\n      // Keep this block just in case that assumption changes in a future version\n      .catch((reason: unknown) => {\n        let msg = 'unknown error';\n        if (reason && reason instanceof Error) {\n          msg = reason.message;\n        } else if (typeof reason === 'string') {\n          msg = reason;\n        }\n\n        this.diag.error(`spans failed to export: ${msg}`);\n      });\n  }\n\n  public override onStart(): void {\n    // do nothing.\n  }\n\n  public override getPendingSpansCount(): number {\n    return this._pendingSpans.length;\n  }\n\n  public override storePendingSpans(\n    sessionId: string,\n    sessionSpan: ReadableSpan\n  ): void {\n    this._spanStorage.storePendingSpans(\n      sessionId,\n      sessionSpan,\n      this._pendingSpans\n    );\n  }\n\n  public clearStoredSpans(sessionId: string): void {\n    this._spanStorage.clearStoredSpans(sessionId);\n  }\n\n  public shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private readonly _shutdown = () => {\n    this._spanStorage.destroy();\n    return this._exporter.shutdown();\n  };\n}\n"],"names":["isSessionSpan","span","attributes","KEY_EMB_TYPE","EMB_TYPES","Session","EmbraceSessionBatchedSpanProcessor","EmbraceProcessor","exporter","limitManager","storage","window","localStorage","storedSpansExpireTimeoutMS","parentArgs","processorName","_pendingSpans","_shutdown","_spanStorage","destroy","_exporter","shutdown","_shutdownOnce","BindOnceFuture","_limitManager","EmbraceSpanStorage","diag","onExpiredSpansExport","spans","_exportSpans","forceFlush","debug","Promise","resolve","undefined","onEnd","isCalled","dropReadableSpan","push","internal","_export","then","result","code","ExportResultCode","FAILED","error","message","catch","reason","msg","Error","onStart","getPendingSpansCount","length","storePendingSpans","sessionId","sessionSpan","clearStoredSpans","call"],"mappings":"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"}