{"version":3,"file":"EmbraceProcessor.js","sources":["../../../../src/processors/EmbraceProcessor/EmbraceProcessor.ts"],"sourcesContent":["import type { DiagLogger, Span } from '@opentelemetry/api';\nimport { diag } from '@opentelemetry/api';\nimport type { ReadableSpan, SpanProcessor } from '@opentelemetry/sdk-trace-web';\nimport type { EmbraceProcessorArgs } from './types.js';\n\nexport abstract class EmbraceProcessor implements SpanProcessor {\n  private readonly _diag: DiagLogger;\n  private readonly _processorName: string;\n\n  protected constructor({\n    diag: providedDiag,\n    processorName,\n  }: EmbraceProcessorArgs) {\n    this._processorName = processorName;\n    this._diag =\n      providedDiag ??\n      diag.createComponentLogger({\n        namespace: processorName,\n      });\n  }\n\n  /* Returns the diag logger */\n  protected get diag(): DiagLogger {\n    return this._diag;\n  }\n\n  /* Returns the processor name */\n  protected get processorName(): string {\n    return this._processorName;\n  }\n\n  public abstract forceFlush(): Promise<void>;\n\n  public abstract onEnd(span: ReadableSpan): void;\n\n  public abstract onStart(span: Span): void;\n\n  /**\n   * Returns the number of spans currently pending export.\n   *\n   * @returns The number of pending spans in the internal queue\n   */\n  public abstract getPendingSpansCount(): number;\n\n  /**\n   * Serializes and stores the current pending spans to storage for persistence.\n   * It also includes the sessionSpan passed as parameter to be included in the storage.\n   *\n   * These spans can later be either cleared out by using clearStoredSpans()\n   * or they will eventually be exported after certain time passes\n   *\n   * @param sessionId - The session ID to associate with the stored spans.\n   * @param sessionSpan - The session span to be included in the stored spans.\n   */\n  public abstract storePendingSpans(\n    sessionId: string,\n    sessionSpan: ReadableSpan\n  ): void;\n\n  /**\n   * Removes all stored spans for a specific session from storage.\n   *\n   * This should be used to continue a session, and follow the regular export process.\n   *\n   * @param sessionId - The session ID whose stored spans should be cleared\n   */\n  public abstract clearStoredSpans(sessionId: string): void;\n\n  public abstract shutdown(): Promise<void>;\n}\n"],"names":["EmbraceProcessor","diag","providedDiag","processorName","_processorName","_diag","createComponentLogger","namespace"],"mappings":";;AAKO,MAAeA,gBAAAA,CAAAA;AAIpB,IAAA,WAAA,CAAsB,EACpBC,IAAAA,EAAMC,YAAY,EAClBC,aAAa,EACQ,CAAE;QACvB,IAAI,CAACC,cAAc,GAAGD,aAAAA;AACtB,QAAA,IAAI,CAACE,KAAK,GACRH,YAAAA,IACAD,IAAAA,CAAKK,qBAAqB,CAAC;YACzBC,SAAAA,EAAWJ;AACb,SAAA,CAAA;AACJ,IAAA;kCAGA,IAAcF,IAAAA,GAAmB;QAC/B,OAAO,IAAI,CAACI,KAAK;AACnB,IAAA;qCAGA,IAAcF,aAAAA,GAAwB;QACpC,OAAO,IAAI,CAACC,cAAc;AAC5B,IAAA;AAwCF;;;;"}