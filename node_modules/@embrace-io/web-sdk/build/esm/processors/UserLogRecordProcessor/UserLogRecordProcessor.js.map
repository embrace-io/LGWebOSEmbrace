{"version":3,"file":"UserLogRecordProcessor.js","sources":["../../../../src/processors/UserLogRecordProcessor/UserLogRecordProcessor.ts"],"sourcesContent":["import type { SdkLogRecord, LogRecordProcessor } from '@opentelemetry/sdk-logs';\nimport { ATTR_USER_ID } from '@opentelemetry/semantic-conventions/incubating';\nimport type { UserLogRecordProcessorArgs } from './types.js';\nimport type { UserManager } from '../../api-users/index.js';\n\n/**\n * UserLogRecordProcessor sets the userId attribute on all log records if the userId is set in the UserManager.\n */\nexport class UserLogRecordProcessor implements LogRecordProcessor {\n  private readonly _userManager: UserManager;\n\n  public constructor({ userManager }: UserLogRecordProcessorArgs) {\n    this._userManager = userManager;\n  }\n\n  // no-op\n  public forceFlush(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  public onEmit(logRecord: SdkLogRecord) {\n    const userId = this._userManager.getUserId();\n\n    if (userId) {\n      logRecord.setAttributes({\n        [ATTR_USER_ID]: this._userManager.getUserId(),\n      });\n    }\n  }\n\n  // no-op\n  public shutdown(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n}\n"],"names":["UserLogRecordProcessor","userManager","_userManager","forceFlush","Promise","resolve","undefined","onEmit","logRecord","userId","getUserId","setAttributes","ATTR_USER_ID","shutdown"],"mappings":";;AAKA;;AAEC,IACM,MAAMA,sBAAAA,CAAAA;IAGX,WAAA,CAAmB,EAAEC,WAAW,EAA8B,CAAE;QAC9D,IAAI,CAACC,YAAY,GAAGD,WAAAA;AACtB,IAAA;;IAGOE,UAAAA,GAA4B;QACjC,OAAOC,OAAAA,CAAQC,OAAO,CAACC,SAAAA,CAAAA;AACzB,IAAA;AAEOC,IAAAA,MAAAA,CAAOC,SAAuB,EAAE;AACrC,QAAA,MAAMC,MAAAA,GAAS,IAAI,CAACP,YAAY,CAACQ,SAAS,EAAA;AAE1C,QAAA,IAAID,MAAAA,EAAQ;AACVD,YAAAA,SAAAA,CAAUG,aAAa,CAAC;AACtB,gBAAA,CAACC,eAAe,IAAI,CAACV,YAAY,CAACQ,SAAS;AAC7C,aAAA,CAAA;AACF,QAAA;AACF,IAAA;;IAGOG,QAAAA,GAA0B;QAC/B,OAAOT,OAAAA,CAAQC,OAAO,CAACC,SAAAA,CAAAA;AACzB,IAAA;AACF;;;;"}