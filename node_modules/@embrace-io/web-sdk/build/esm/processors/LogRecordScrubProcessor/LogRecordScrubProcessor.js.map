{"version":3,"file":"LogRecordScrubProcessor.js","sources":["../../../../src/processors/LogRecordScrubProcessor/LogRecordScrubProcessor.ts"],"sourcesContent":["import type { SdkLogRecord, LogRecordProcessor } from '@opentelemetry/sdk-logs';\nimport type { LogRecordScrubProcessorArgs } from './types.js';\nimport type { AttributeScrubber } from '../../common/index.js';\n\nexport class LogRecordScrubProcessor implements LogRecordProcessor {\n  private readonly _attributeScrubbers: AttributeScrubber[];\n\n  public constructor({ attributeScrubbers }: LogRecordScrubProcessorArgs) {\n    this._attributeScrubbers = attributeScrubbers;\n  }\n\n  // no-op\n  public forceFlush(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  public onEmit(logRecord: SdkLogRecord) {\n    this._attributeScrubbers.forEach(scrubber => {\n      const value = logRecord.attributes[scrubber.key];\n      if (value && typeof value === 'string') {\n        logRecord.setAttribute(scrubber.key, scrubber.scrub(value));\n      }\n    });\n  }\n\n  // no-op\n  public shutdown(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n}\n"],"names":["LogRecordScrubProcessor","attributeScrubbers","_attributeScrubbers","forceFlush","Promise","resolve","undefined","onEmit","logRecord","forEach","scrubber","value","attributes","key","setAttribute","scrub","shutdown"],"mappings":"AAIO,MAAMA,uBAAAA,CAAAA;IAGX,WAAA,CAAmB,EAAEC,kBAAkB,EAA+B,CAAE;QACtE,IAAI,CAACC,mBAAmB,GAAGD,kBAAAA;AAC7B,IAAA;;IAGOE,UAAAA,GAA4B;QACjC,OAAOC,OAAAA,CAAQC,OAAO,CAACC,SAAAA,CAAAA;AACzB,IAAA;AAEOC,IAAAA,MAAAA,CAAOC,SAAuB,EAAE;AACrC,QAAA,IAAI,CAACN,mBAAmB,CAACO,OAAO,CAACC,CAAAA,QAAAA,GAAAA;AAC/B,YAAA,MAAMC,QAAQH,SAAAA,CAAUI,UAAU,CAACF,QAAAA,CAASG,GAAG,CAAC;YAChD,IAAIF,KAAAA,IAAS,OAAOA,KAAAA,KAAU,QAAA,EAAU;AACtCH,gBAAAA,SAAAA,CAAUM,YAAY,CAACJ,QAAAA,CAASG,GAAG,EAAEH,QAAAA,CAASK,KAAK,CAACJ,KAAAA,CAAAA,CAAAA;AACtD,YAAA;AACF,QAAA,CAAA,CAAA;AACF,IAAA;;IAGOK,QAAAA,GAA0B;QAC/B,OAAOZ,OAAAA,CAAQC,OAAO,CAACC,SAAAA,CAAAA;AACzB,IAAA;AACF;;;;"}